/**
 * Generated by Verge3D Puzzles v.3.6.1
 * Mon May 30 2022 11:27:19 GMT+0200 (heure d’été d’Europe centrale)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 wrong behavior
            elem.setAttribute(attr, value);
        } else if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}




// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  setHTMLElemStyle('width', String(Math.round(_initGlob.percentage)) + '%', 'progress_bar', false);
  setHTMLElemAttribute('innerHTML', String(Math.round(_initGlob.percentage)) + '%', 'percentage', false);
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  setHTMLElemStyle('display', 'none', 'preloader_div', false);
  setHTMLElemStyle('visibility', 'visible', ['boutonmenu', 'boutonmenu_return'], true);
  setHTMLElemStyle('visibility', 'visible', 'Check2', true);
  setHTMLElemStyle('left', '250px', 'menulist', true);
  setHTMLElemStyle('visibility', 'visible', 'Title0', true);
  setHTMLElemStyle('visibility', 'hidden', ['picocon1', 'picocon2', 'picocon3', 'picocon4', 'picocon5', 'picocon6', 'picocon7', 'picocon8', 'picocon9', 'picocon10', 'picocon11', 'picocon12', 'picocon13', 'picocon14', 'picocon15'], true);
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["restart"] = restart;
this.procedures["Reboot"] = Reboot;
this.procedures["OpenFront"] = OpenFront;
this.procedures["CloseFront"] = CloseFront;
this.procedures["OpenRear"] = OpenRear;
this.procedures["CloseRear"] = CloseRear;
this.procedures["ShowAnnotations"] = ShowAnnotations;
this.procedures["HideAnnotations"] = HideAnnotations;
this.procedures["SetKnife1"] = SetKnife1;
this.procedures["ShowPic1"] = ShowPic1;
this.procedures["ShowPic2"] = ShowPic2;
this.procedures["ShowPic3"] = ShowPic3;
this.procedures["ShowPic4"] = ShowPic4;
this.procedures["ShowPic5"] = ShowPic5;
this.procedures["PerformKnife1"] = PerformKnife1;
this.procedures["ShowPic6"] = ShowPic6;
this.procedures["ShowPic7"] = ShowPic7;
this.procedures["ShowPic8"] = ShowPic8;
this.procedures["ShowPic9"] = ShowPic9;
this.procedures["ShowPic10"] = ShowPic10;
this.procedures["ShowPic11"] = ShowPic11;
this.procedures["ShowPic12"] = ShowPic12;
this.procedures["ShowPic13"] = ShowPic13;
this.procedures["ShowPic14"] = ShowPic14;
this.procedures["SetKnife2"] = SetKnife2;
this.procedures["PerformKnife32"] = PerformKnife32;
this.procedures["PerformKnife2"] = PerformKnife2;
this.procedures["SetKnife3"] = SetKnife3;
this.procedures["SetKnife33"] = SetKnife33;
this.procedures["PerformKnife33"] = PerformKnife33;
this.procedures["PerformKnife3"] = PerformKnife3;
this.procedures["SetKnife43"] = SetKnife43;
this.procedures["PerformKnife43"] = PerformKnife43;
this.procedures["SetKnife34"] = SetKnife34;
this.procedures["SetKnife4"] = SetKnife4;
this.procedures["SetKnife44"] = SetKnife44;
this.procedures["PerformKnife34"] = PerformKnife34;
this.procedures["PerformKnife4"] = PerformKnife4;
this.procedures["PerformKnife44"] = PerformKnife44;
this.procedures["SetKnife5"] = SetKnife5;
this.procedures["SetKnife35"] = SetKnife35;
this.procedures["SetKnife45"] = SetKnife45;
this.procedures["PerformKnife35"] = PerformKnife35;
this.procedures["PerformKnife5"] = PerformKnife5;
this.procedures["PerformKnife45"] = PerformKnife45;
this.procedures["SetKnife6"] = SetKnife6;
this.procedures["SetKnife36"] = SetKnife36;
this.procedures["PerformKnife6"] = PerformKnife6;
this.procedures["SetKnife46"] = SetKnife46;
this.procedures["PerformKnife36"] = PerformKnife36;
this.procedures["SetKnife7"] = SetKnife7;
this.procedures["PerformKnife46"] = PerformKnife46;
this.procedures["PerformKnife7"] = PerformKnife7;
this.procedures["SetKnife8"] = SetKnife8;
this.procedures["PerformKnife8"] = PerformKnife8;
this.procedures["SetKnife9"] = SetKnife9;
this.procedures["PerformKnife9"] = PerformKnife9;
this.procedures["SetKnife10"] = SetKnife10;
this.procedures["PerformKnife10"] = PerformKnife10;
this.procedures["SetKnife11"] = SetKnife11;
this.procedures["PerformKnife11"] = PerformKnife11;
this.procedures["SetKnife12"] = SetKnife12;
this.procedures["PerformKnife12"] = PerformKnife12;
this.procedures["SetKnife13"] = SetKnife13;
this.procedures["PerformKnife13"] = PerformKnife13;
this.procedures["SetKnife14"] = SetKnife14;
this.procedures["PerformKnife14"] = PerformKnife14;

var PROC = {
    "restart": restart,
    "Reboot": Reboot,
    "OpenFront": OpenFront,
    "CloseFront": CloseFront,
    "OpenRear": OpenRear,
    "CloseRear": CloseRear,
    "ShowAnnotations": ShowAnnotations,
    "HideAnnotations": HideAnnotations,
    "SetKnife1": SetKnife1,
    "ShowPic1": ShowPic1,
    "ShowPic2": ShowPic2,
    "ShowPic3": ShowPic3,
    "ShowPic4": ShowPic4,
    "ShowPic5": ShowPic5,
    "PerformKnife1": PerformKnife1,
    "ShowPic6": ShowPic6,
    "ShowPic7": ShowPic7,
    "ShowPic8": ShowPic8,
    "ShowPic9": ShowPic9,
    "ShowPic10": ShowPic10,
    "ShowPic11": ShowPic11,
    "ShowPic12": ShowPic12,
    "ShowPic13": ShowPic13,
    "ShowPic14": ShowPic14,
    "SetKnife2": SetKnife2,
    "PerformKnife32": PerformKnife32,
    "PerformKnife2": PerformKnife2,
    "SetKnife3": SetKnife3,
    "SetKnife33": SetKnife33,
    "PerformKnife33": PerformKnife33,
    "PerformKnife3": PerformKnife3,
    "SetKnife43": SetKnife43,
    "PerformKnife43": PerformKnife43,
    "SetKnife34": SetKnife34,
    "SetKnife4": SetKnife4,
    "SetKnife44": SetKnife44,
    "PerformKnife34": PerformKnife34,
    "PerformKnife4": PerformKnife4,
    "PerformKnife44": PerformKnife44,
    "SetKnife5": SetKnife5,
    "SetKnife35": SetKnife35,
    "SetKnife45": SetKnife45,
    "PerformKnife35": PerformKnife35,
    "PerformKnife5": PerformKnife5,
    "PerformKnife45": PerformKnife45,
    "SetKnife6": SetKnife6,
    "SetKnife36": SetKnife36,
    "PerformKnife6": PerformKnife6,
    "SetKnife46": SetKnife46,
    "PerformKnife36": PerformKnife36,
    "SetKnife7": SetKnife7,
    "PerformKnife46": PerformKnife46,
    "PerformKnife7": PerformKnife7,
    "SetKnife8": SetKnife8,
    "PerformKnife8": PerformKnife8,
    "SetKnife9": SetKnife9,
    "PerformKnife9": PerformKnife9,
    "SetKnife10": SetKnife10,
    "PerformKnife10": PerformKnife10,
    "SetKnife11": SetKnife11,
    "PerformKnife11": PerformKnife11,
    "SetKnife12": SetKnife12,
    "PerformKnife12": PerformKnife12,
    "SetKnife13": SetKnife13,
    "PerformKnife13": PerformKnife13,
    "SetKnife14": SetKnife14,
    "PerformKnife14": PerformKnife14,
};

var Split, avantouvert, ArriereOuvert, MenuBase, MenuStep;


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, eventType, callback]);
    }
}




// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}




// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
    }
}



// bloom puzzle
function bloom(threshold, strength, radius) {
    appInstance.enablePostprocessing([{
        type: 'bloom',
        threshold: threshold,
        strength: strength,
        radius: radius
    }]);
}




/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && "v3d" in scene.userData && "coordSystem" in scene.userData.v3d) {
        return scene.userData.v3d.coordSystem;
    } else {
        // COMPAT: <2.17, consider replacing to 'Y_UP_RIGHT' for scenes with unknown origin
        return 'Z_UP_RIGHT';
    }
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();




// tweenCamera puzzle
function tweenCamera(posOrObj, targetOrObj, duration, doSlot, movementType) {
    var camera = appInstance.getCamera();

    if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = coordsTransform(worldPos, getCoordSystem(), 'Y_UP_RIGHT');
    } else if (posOrObj) {
        var posObj = getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    } else {
        // empty input means: don't change the position
        var worldPos = camera.getWorldPosition(_pGlob.vec3Tmp);
    }

    if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = coordsTransform(worldTarget, getCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var targObj = getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
    }

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot,
                    movementType);
        }
    } else {
        // TODO: static camera, just position it for now
        if (camera.parent) {
            camera.parent.worldToLocal(worldPos);
        }
        camera.position.copy(worldPos);
        camera.lookAt(worldTarget);
        doSlot();
    }
}



// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}



// outline puzzle
function outline(objSelector, doWhat) {
    var objNames = retrieveObjectNames(objSelector);

    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}



// getAnimations puzzle
function getAnimations(objSelector) {
    var objNames = retrieveObjectNames(objSelector);

    var animations = [];
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        // use objName as animName - for now we have one-to-one match
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, objName);
        if (action)
            animations.push(objName);
    }
    return animations;
}



/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}



/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && "v3d" in scene.userData && "animFrameRate" in scene.userData.v3d) {
        return scene.userData.v3d.animFrameRate;
    }
    return 24;
}



_pGlob.animMixerCallbacks = [];

var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished))
            appInstance.mixer.addEventListener('finished', onMixerFinished);
    };

}();



// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, isPlayAnimCompat, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                // compatibility reasons: deprecated playAnimation puzzles don't
                // change repetitions
                if (!isPlayAnimCompat) {
                    action.repetitions = Infinity;
                }

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}


// Describe this function...
function restart() {
  outline(['ALL_OBJECTS'], 'DISABLE');
  changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'VisualTool'], false);

  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'AnimatedKnife']), 0, null, 'AUTO', 1,
          function() {}, undefined, false);

      tweenCamera('CameraMainStart', 'FocusMain', 2, function() {
    setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
    setHTMLElemStyle('visibility', 'hidden', 'ActionTap_out', true);
    setHTMLElemStyle('visibility', 'hidden', 'BoutonSpares', true);
    setHTMLElemStyle('visibility', 'hidden', 'BoutonSparesout', true);
    MenuBase = 0;
    MenuStep = 0;
  }, 0);
  if (avantouvert == true) {
    CloseFront();
  }
  if (ArriereOuvert == true) {
    CloseRear();
  }
}

// Describe this function...
function Reboot() {
  if (Split == 4) {

    operateAnimation('PLAY', getAnimations(['GROUP', 'ReplaceGuillotine']), 1850, 2100, 'LoopOnce', 4,
            function() {}, undefined, true);

        registerSetTimeout(2, function() {
      changeVis(['GROUP', 'BoltHead'], true);

      operateAnimation('PLAY', getAnimations(['GROUP', 'BoltHead']), 1600, 1700, 'LoopOnce', 2,
              function() {}, undefined, false);

          restart();
    });
  } else if (Split == 3) {

    operateAnimation('PLAY', getAnimations(['GROUP', 'ReplaceStationery']), 1850, 2100, 'LoopOnce', 4,
            function() {}, undefined, true);

        registerSetTimeout(2, function() {
      changeVis(['GROUP', 'BoltHead'], true);

      operateAnimation('PLAY', getAnimations(['GROUP', 'BoltHead']), 1600, 1700, 'LoopOnce', 2,
              function() {}, undefined, false);

          restart();
    });
  } else if (Split == 2) {

    operateAnimation('PLAY', getAnimations(['GROUP', 'ReplaceBlade']), 1850, 2000, 'LoopOnce', 4,
            function() {}, undefined, true);

        registerSetTimeout(1.5, function() {
      changeVis(['GROUP', 'BoltHead'], true);

      operateAnimation('PLAY', getAnimations(['GROUP', 'BoltHead']), 1600, 1700, 'LoopOnce', 2,
              function() {}, undefined, false);

          restart();
    });
  } else if (Split == 1) {

    operateAnimation('PLAY', getAnimations(['GROUP', 'ReplaceBlade']), 1850, 1950, 'LoopOnce', 4,
            function() {}, undefined, true);

        registerSetTimeout(1, function() {
      changeVis(['GROUP', 'BoltHead'], true);

      operateAnimation('PLAY', getAnimations(['GROUP', 'BoltHead']), 1600, 1700, 'LoopOnce', 2,
              function() {}, undefined, false);

          restart();
    });
  } else {
    restart();
  }
}


function matGetValues(matName) {

    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return [];

    if (mat.isMeshNodeMaterial)
        return Object.keys(mat.nodeValueMap);
    else if (mat.isMeshStandardMaterial)
        return ['metalness', 'roughness', 'bumpScale', 'emissiveIntensity', 'envMapIntensity'];
    else
        return [];
}



// setMaterialValue puzzle
function setMaterialValue(matName, valName, value) {

    var values = matGetValues(matName);
    if (values.indexOf(valName) < 0)
        return;

    var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
            var valIdx = mat.nodeValueMap[valName];
            mat.nodeValue[valIdx] = Number(value);
        } else
            mat[valName] = Number(value);

        if (appInstance.scene !== null) {
            if (mat === appInstance.scene.worldMaterial) {
                appInstance.updateEnvironment(mat);
            }
        }
    }
}



// Copyright (c) 2010-2019 Tween.js authors.
// Easing equations Copyright (c) 2001 Robert Penner http://robertpenner.com/easing/
// Code copied from https://cdnjs.cloudflare.com/ajax/libs/tween.js/17.3.0/Tween.min.js

var _Group=function(){this._tweens={},this._tweensAddedDuringUpdate={}};_Group.prototype={getAll:function(){return Object.keys(this._tweens).map(function(t){return this._tweens[t]}.bind(this))},removeAll:function(){this._tweens={}},add:function(t){this._tweens[t.getId()]=t,this._tweensAddedDuringUpdate[t.getId()]=t},remove:function(t){delete this._tweens[t.getId()],delete this._tweensAddedDuringUpdate[t.getId()]},update:function(t,n){var e=Object.keys(this._tweens);
if(0===e.length)return!1;for(t=void 0!==t?t:TWEEN.now();0<e.length;){this._tweensAddedDuringUpdate={};for(var i=0;i<e.length;i++){var r=this._tweens[e[i]];r&&!1===r.update(t)&&(r._isPlaying=!1,n||delete this._tweens[e[i]])}e=Object.keys(this._tweensAddedDuringUpdate)}return!0}};var TWEEN=new _Group;TWEEN.Group=_Group,TWEEN._nextId=0,TWEEN.nextId=function(){return TWEEN._nextId++},"undefined"==typeof window&&"undefined"!=typeof process&&process.hrtime?TWEEN.now=function(){var t=process.hrtime();
return 1e3*t[0]+t[1]/1e6}:"undefined"!=typeof window&&void 0!==window.performance&&void 0!==window.performance.now?TWEEN.now=window.performance.now.bind(window.performance):void 0!==Date.now?TWEEN.now=Date.now:TWEEN.now=function(){return(new Date).getTime()},TWEEN.Tween=function(t,n){this._object=t,this._valuesStart={},this._valuesEnd={},this._valuesStartRepeat={},this._duration=1e3,this._repeat=0,this._repeatDelayTime=void 0,this._yoyo=!1,this._isPlaying=!1,this._reversed=!1,this._delayTime=0,
this._startTime=null,this._easingFunction=TWEEN.Easing.Linear.None,this._interpolationFunction=TWEEN.Interpolation.Linear,this._chainedTweens=[],this._onStartCallback=null,this._onStartCallbackFired=!1,this._onUpdateCallback=null,this._onCompleteCallback=null,this._onStopCallback=null,this._group=n||TWEEN,this._id=TWEEN.nextId()},TWEEN.Tween.prototype={getId:function(){return this._id},isPlaying:function(){return this._isPlaying},to:function(t,n){return this._valuesEnd=t,void 0!==n&&(this._duration=n),this},start:function(t){for(var n in this._group.add(this),this._isPlaying=!0,this._onStartCallbackFired=!1,this._startTime=void 0!==t?"string"==typeof t?TWEEN.now()+parseFloat(t):t:TWEEN.now(),this._startTime+=this._delayTime,this._valuesEnd){if(this._valuesEnd[n]instanceof Array){if(0===this._valuesEnd[n].length)continue;
this._valuesEnd[n]=[this._object[n]].concat(this._valuesEnd[n])}void 0!==this._object[n]&&(this._valuesStart[n]=this._object[n],this._valuesStart[n]instanceof Array==!1&&(this._valuesStart[n]*=1),this._valuesStartRepeat[n]=this._valuesStart[n]||0)}return this},stop:function(){return this._isPlaying&&(this._group.remove(this),this._isPlaying=!1,null!==this._onStopCallback&&this._onStopCallback(this._object),this.stopChainedTweens()),this},end:function(){return this.update(this._startTime+this._duration),this},stopChainedTweens:function(){for(var t=0,n=this._chainedTweens.length;t<n;
t++)this._chainedTweens[t].stop()},group:function(t){return this._group=t,this},delay:function(t){return this._delayTime=t,this},repeat:function(t){return this._repeat=t,this},repeatDelay:function(t){return this._repeatDelayTime=t,this},yoyo:function(t){return this._yoyo=t,this},easing:function(t){return this._easingFunction=t,this},interpolation:function(t){return this._interpolationFunction=t,this},chain:function(){return this._chainedTweens=arguments,this},onStart:function(t){return this._onStartCallback=t,this},onUpdate:function(t){return this._onUpdateCallback=t,this},onComplete:function(t){return this._onCompleteCallback=t,this},onStop:function(t){return this._onStopCallback=t,this},update:function(t){var n,e,i;if(t<this._startTime)return!0;
for(n in!1===this._onStartCallbackFired&&(null!==this._onStartCallback&&this._onStartCallback(this._object),this._onStartCallbackFired=!0),e=(t-this._startTime)/this._duration,e=0===this._duration||1<e?1:e,i=this._easingFunction(e),this._valuesEnd)if(void 0!==this._valuesStart[n]){var r=this._valuesStart[n]||0,a=this._valuesEnd[n];a instanceof Array?this._object[n]=this._interpolationFunction(a,i):("string"==typeof a&&(a="+"===a.charAt(0)||"-"===a.charAt(0)?r+parseFloat(a):parseFloat(a)),"number"==typeof a&&(this._object[n]=r+(a-r)*i))}if(null!==this._onUpdateCallback&&this._onUpdateCallback(this._object),1!==e)return!0;
if(0<this._repeat){for(n in isFinite(this._repeat)&&this._repeat--,this._valuesStartRepeat){if("string"==typeof this._valuesEnd[n]&&(this._valuesStartRepeat[n]=this._valuesStartRepeat[n]+parseFloat(this._valuesEnd[n])),this._yoyo){var s=this._valuesStartRepeat[n];this._valuesStartRepeat[n]=this._valuesEnd[n],this._valuesEnd[n]=s}this._valuesStart[n]=this._valuesStartRepeat[n]}return this._yoyo&&(this._reversed=!this._reversed),void 0!==this._repeatDelayTime?this._startTime=t+this._repeatDelayTime:this._startTime=t+this._delayTime,!0}null!==this._onCompleteCallback&&this._onCompleteCallback(this._object);for(var o=0,u=this._chainedTweens.length;o<u;o++)this._chainedTweens[o].start(this._startTime+this._duration);
return!1}},TWEEN.Easing={Linear:{None:function(t){return t}},Quadratic:{In:function(t){return t*t},Out:function(t){return t*(2-t)},InOut:function(t){return(t*=2)<1?.5*t*t:-.5*(--t*(t-2)-1)}},Cubic:{In:function(t){return t*t*t},Out:function(t){return--t*t*t+1},InOut:function(t){return(t*=2)<1?.5*t*t*t:.5*((t-=2)*t*t+2)}},Quartic:{In:function(t){return t*t*t*t},Out:function(t){return 1- --t*t*t*t},InOut:function(t){return(t*=2)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2)}},Quintic:{In:function(t){return t*t*t*t*t},Out:function(t){return--t*t*t*t*t+1},InOut:function(t){return(t*=2)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)}},Sinusoidal:{In:function(t){return 1-Math.cos(t*Math.PI/2)},Out:function(t){return Math.sin(t*Math.PI/2)},InOut:function(t){return.5*(1-Math.cos(Math.PI*t))}},Exponential:{In:function(t){return 0===t?0:Math.pow(1024,t-1)},Out:function(t){return 1===t?1:1-Math.pow(2,-10*t)},
InOut:function(t){return 0===t?0:1===t?1:(t*=2)<1?.5*Math.pow(1024,t-1):.5*(2-Math.pow(2,-10*(t-1)))}},Circular:{In:function(t){return 1-Math.sqrt(1-t*t)},Out:function(t){return Math.sqrt(1- --t*t)},InOut:function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)}},Elastic:{In:function(t){return 0===t?0:1===t?1:-Math.pow(2,10*(t-1))*Math.sin(5*(t-1.1)*Math.PI)},Out:function(t){return 0===t?0:1===t?1:Math.pow(2,-10*t)*Math.sin(5*(t-.1)*Math.PI)+1},InOut:function(t){return 0===t?0:1===t?1:(t*=2)<1?-.5*Math.pow(2,10*(t-1))*Math.sin(5*(t-1.1)*Math.PI):.5*Math.pow(2,-10*(t-1))*Math.sin(5*(t-1.1)*Math.PI)+1}},Back:{In:function(t){return t*t*(2.70158*t-1.70158)},Out:function(t){return--t*t*(2.70158*t+1.70158)+1},InOut:function(t){var n=2.5949095;
return(t*=2)<1?t*t*((n+1)*t-n)*.5:.5*((t-=2)*t*((n+1)*t+n)+2)}},Bounce:{In:function(t){return 1-TWEEN.Easing.Bounce.Out(1-t)},Out:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},InOut:function(t){return t<.5?.5*TWEEN.Easing.Bounce.In(2*t):.5*TWEEN.Easing.Bounce.Out(2*t-1)+.5}}},TWEEN.Interpolation={Linear:function(t,n){var e=t.length-1,i=e*n,r=Math.floor(i),a=TWEEN.Interpolation.Utils.Linear;return n<0?a(t[0],t[1],i):1<n?a(t[e],t[e-1],e-i):a(t[r],t[e<r+1?e:r+1],i-r)},Bezier:function(t,n){for(var e=0,i=t.length-1,r=Math.pow,a=TWEEN.Interpolation.Utils.Bernstein,s=0;s<=i;s++)e+=r(1-n,i-s)*r(n,s)*t[s]*a(i,s);return e},CatmullRom:function(t,n){var e=t.length-1,i=e*n,r=Math.floor(i),a=TWEEN.Interpolation.Utils.CatmullRom;
return t[0]===t[e]?(n<0&&(r=Math.floor(i=e*(1+n))),a(t[(r-1+e)%e],t[r],t[(r+1)%e],t[(r+2)%e],i-r)):n<0?t[0]-(a(t[0],t[0],t[1],t[1],-i)-t[0]):1<n?t[e]-(a(t[e],t[e],t[e-1],t[e-1],i-e)-t[e]):a(t[r?r-1:0],t[r],t[e<r+1?e:r+1],t[e<r+2?e:r+2],i-r)},Utils:{Linear:function(t,n,e){return(n-t)*e+t},Bernstein:function(t,n){var e=TWEEN.Interpolation.Utils.Factorial;return e(t)/e(n)/e(t-n)},Factorial:function(){var i=[1];return function(t){var n=1;if(i[t])return i[t];for(var e=t;1<e;e--)n*=e;return i[t]=n}}(),CatmullRom:function(t,n,e,i,r){var a=.5*(e-t),s=.5*(i-n),o=r*r;return(2*n-2*e+a+s)*(r*o)+(-3*n+3*e-2*a-s)*o+a*r+n}}},function(t){"function"==typeof define&&define.amd?define([],function(){return TWEEN}):"undefined"!=typeof module&&"object"==typeof exports?module.exports=TWEEN:void 0!==t&&(t.TWEEN=TWEEN)}(this);



// animateParam puzzle
function tweenUpdateCb() {
    TWEEN.update();
}
appInstance.renderCallbacks.push(tweenUpdateCb);
if (v3d.PL.editorRenderCallbacks)
    v3d.PL.editorRenderCallbacks.push([appInstance, tweenUpdateCb]);



// animateParam puzzle
_pGlob.animateParamUpdate = 0;

function animateParam(from, to, duration, easing, easing2, repeat, yoyo, on_update, when_finished) {

    var mode = easing == "Linear" ?
        TWEEN.Easing.Linear.None : TWEEN.Easing[easing][easing2];

    var tweenObject = (typeof from != "number");

    if (!tweenObject) { // number
        from = [from];
        to = [to];
    }

    var tween = new TWEEN.Tween(from)
                    .to(to, duration * 1000)
                    .easing(mode)
                    .repeat(repeat)
                    .yoyo(yoyo)
                    .onUpdate(function (object) {
                        if (tweenObject)
                            _pGlob.animateParamUpdate = object;
                        else // number
                            _pGlob.animateParamUpdate = object[0];
                        on_update();
                    })
                    .onComplete(function (object) {
                        when_finished();
                    })
                    .start();
}


// Describe this function...
function OpenFront() {

  operateAnimation('PLAY', getAnimations(['GROUP', 'CapotAV']), 0, 40, 'LoopOnce', 1,
          function() {}, undefined, false);


  animateParam(1, 0.5, 2, 'Linear', 'InOut', 0, false,
      function() {
    setMaterialValue('BluePaintCoiffe', 'Value', _pGlob.animateParamUpdate || 0);
    setMaterialValue('Blanc.Coiffe', 'Value', _pGlob.animateParamUpdate || 0);
  },
      function() {});

      avantouvert = true;
}

// Describe this function...
function CloseFront() {

  operateAnimation('PLAY', getAnimations(['GROUP', 'CapotAV']), 0, 40, 'LoopOnce', 1,
          function() {}, undefined, true);


  animateParam(0.5, 1, 2, 'Linear', 'InOut', 0, false,
      function() {
    setMaterialValue('BluePaintCoiffe', 'Value', _pGlob.animateParamUpdate || 0);
    setMaterialValue('Blanc.Coiffe', 'Value', _pGlob.animateParamUpdate || 0);
  },
      function() {});

      avantouvert = false;
}

// Describe this function...
function OpenRear() {

  operateAnimation('PLAY', getAnimations('CapotAR'), 0, 40, 'LoopOnce', 1,
          function() {}, undefined, false);


  animateParam(1, 0.5, 2, 'Linear', 'InOut', 0, false,
      function() {
    setMaterialValue('BluePaintCapot', 'Value', _pGlob.animateParamUpdate || 0);
    setMaterialValue('MetalBleuCapot', 'Value', _pGlob.animateParamUpdate || 0);
    setMaterialValue('GreypaintCapot', 'Value', _pGlob.animateParamUpdate || 0);
  },
      function() {});

      ArriereOuvert = true;
}

// Describe this function...
function CloseRear() {

  operateAnimation('PLAY', getAnimations('CapotAR'), 0, 40, 'LoopOnce', 1,
          function() {}, undefined, true);


  animateParam(0.5, 1, 2, 'Linear', 'InOut', 0, false,
      function() {
    setMaterialValue('BluePaintCapot', 'Value', _pGlob.animateParamUpdate || 0);
    setMaterialValue('MetalBleuCapot', 'Value', _pGlob.animateParamUpdate || 0);
    setMaterialValue('GreypaintCapot', 'Value', _pGlob.animateParamUpdate || 0);
  },
      function() {});

      ArriereOuvert = false;
}


// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 wrong behavior
            elem.setAttribute(attr, value);
        } else if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}


// Describe this function...
function ShowAnnotations() {
  setHTMLElemStyle('display', 'block', ['an_1', 'an_2', 'an_3', 'an_4', 'an_5'], false);
  eventHTMLElem('click', 'an_1', false, function(event) {
    setHTMLElemAttribute('innerHTML', 'Guillotine Knife ID : 12.358', 'RefDisplay', true);
    setHTMLElemStyle('visibility', 'hidden', ['RefTap_1', 'RefTap_2', 'RefTap_3', 'RefTap_4', 'RefTap_5'], true);
    setHTMLElemStyle('visibility', 'visible', 'RefTap_1', true);
  });
  eventHTMLElem('touchstart', 'an_1', false, function(event) {
    setHTMLElemAttribute('innerHTML', 'Guillotine Knife ID : 12.358', 'RefDisplay', true);
    setHTMLElemStyle('visibility', 'hidden', ['RefTap_1', 'RefTap_2', 'RefTap_3', 'RefTap_4', 'RefTap_5'], true);
    setHTMLElemStyle('visibility', 'visible', 'RefTap_1', true);
  });
  eventHTMLElem('click', 'an_2', false, function(event) {
    setHTMLElemAttribute('innerHTML', 'Tork Bolt ID : 12.072', 'RefDisplay', true);
    setHTMLElemStyle('visibility', 'hidden', ['RefTap_1', 'RefTap_2', 'RefTap_3', 'RefTap_4', 'RefTap_5'], true);
    setHTMLElemStyle('visibility', 'visible', 'RefTap_2', true);
  });
  eventHTMLElem('touchstart', 'an_2', false, function(event) {
    setHTMLElemAttribute('innerHTML', 'Tork Bolt ID : 12.072', 'RefDisplay', true);
    setHTMLElemStyle('visibility', 'hidden', ['RefTap_1', 'RefTap_2', 'RefTap_3', 'RefTap_4', 'RefTap_5'], true);
    setHTMLElemStyle('visibility', 'visible', 'RefTap_2', true);
  });
  eventHTMLElem('click', 'an_3', false, function(event) {
    setHTMLElemAttribute('innerHTML', 'Static Knife block ID : 12.358', 'RefDisplay', true);
    setHTMLElemStyle('visibility', 'hidden', ['RefTap_1', 'RefTap_2', 'RefTap_3', 'RefTap_4', 'RefTap_5'], true);
    setHTMLElemStyle('visibility', 'visible', 'RefTap_3', true);
  });
  eventHTMLElem('touchstart', 'an_3', false, function(event) {
    setHTMLElemAttribute('innerHTML', 'Static Knife block ID : 12.358', 'RefDisplay', true);
    setHTMLElemStyle('visibility', 'hidden', ['RefTap_1', 'RefTap_2', 'RefTap_3', 'RefTap_4', 'RefTap_5'], true);
    setHTMLElemStyle('visibility', 'visible', 'RefTap_3', true);
  });
  eventHTMLElem('click', 'an_4', false, function(event) {
    setHTMLElemAttribute('innerHTML', 'Tork Bolt ID : 12.358', 'RefDisplay', true);
    setHTMLElemStyle('visibility', 'hidden', ['RefTap_1', 'RefTap_2', 'RefTap_3', 'RefTap_4', 'RefTap_5'], true);
    setHTMLElemStyle('visibility', 'visible', 'RefTap_4', true);
  });
  eventHTMLElem('touchstart', 'an_4', false, function(event) {
    setHTMLElemAttribute('innerHTML', 'Tork Bolt ID : 12.358', 'RefDisplay', true);
    setHTMLElemStyle('visibility', 'hidden', ['RefTap_1', 'RefTap_2', 'RefTap_3', 'RefTap_4', 'RefTap_5'], true);
    setHTMLElemStyle('visibility', 'visible', 'RefTap_4', true);
  });
  eventHTMLElem('click', 'an_5', false, function(event) {
    setHTMLElemAttribute('innerHTML', 'Static Knife ID : 12.358', 'RefDisplay', true);
    setHTMLElemStyle('visibility', 'hidden', ['RefTap_1', 'RefTap_2', 'RefTap_3', 'RefTap_4', 'RefTap_5'], true);
    setHTMLElemStyle('visibility', 'visible', 'RefTap_5', true);
  });
  eventHTMLElem('touchstart', 'an_5', false, function(event) {
    setHTMLElemAttribute('innerHTML', 'Static Knife ID : 12.358', 'RefDisplay', true);
    setHTMLElemStyle('visibility', 'hidden', ['RefTap_1', 'RefTap_2', 'RefTap_3', 'RefTap_4', 'RefTap_5'], true);
    setHTMLElemStyle('visibility', 'visible', 'RefTap_5', true);
  });
}

// Describe this function...
function HideAnnotations() {
  setHTMLElemStyle('display', 'none', ['an_1', 'an_2', 'an_3', 'an_4', 'an_5'], false);
}


function findUniqueObjectName(name) {
    function objNameUsed(name) {
        return Boolean(getObjectByName(name));
    }
    while (objNameUsed(name)) {
        var r = name.match(/^(.*?)(\d+)$/);
        if (!r) {
            name += "2";
        } else {
            name = r[1] + (parseInt(r[2], 10) + 1);
        }
    }
    return name;
}



// addAnnotation and removeAnnotation puzzles
function handleAnnot(add, annot, objSelector, contents, id, name) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        // check if it already has an annotation and remove it
        for (var j = 0; j < obj.children.length; j++) {
            var child = obj.children[j];
            if (child.type == "Annotation") {
                // delete all childs of annotation
                child.traverse(function(child2) {
                    if (child2.isAnnotation)
                        child2.dispose();
                    });
                obj.remove(child);
            }
        }
        if (add) {
            var aObj = new v3d.Annotation(appInstance.container, annot, contents);
            aObj.name = findUniqueObjectName(name ? name : annot);
            aObj.fadeObscured = _pGlob.fadeAnnotations;
            if (id) {
                aObj.annotation.id = id;
                aObj.annotationDialog.id = id+'_dialog';
            }
            obj.add(aObj);
        }
    }
}


// Describe this function...
function SetKnife1() {
  ShowPic1();
  setHTMLElemStyle('display', 'none', 'an_10', false);

  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'AnimatedKnife']), 0, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'VisualTool'], false);
  outline(['ALL_OBJECTS'], 'DISABLE');
  outline(['GROUP', 'BoltHead'], 'ENABLE');
  Split = 0;
  MenuStep = 1;
  setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
}

// Describe this function...
function ShowPic1() {
  setHTMLElemStyle('left', '0px', 'verticalmap', true);
  setHTMLElemStyle('visibility', 'visible', 'ShadowpicB1', true);
  setHTMLElemStyle('visibility', 'hidden', ['ShadowpicB2', 'ShadowpicB3', 'ShadowpicB4', 'ShadowpicB5', 'ShadowpicB6', 'ShadowpicB7', 'ShadowpicB8', 'ShadowpicB9', 'ShadowpicB10', 'ShadowpicB11', 'ShadowpicB12', 'ShadowpicB13', 'ShadowpicB14', 'ShadowpicB15'], true);
  setHTMLElemStyle('visibility', 'hidden', ['Shadowpic2', 'Shadowpic3', 'Shadowpic4', 'Shadowpic5', 'Shadowpic6', 'Shadowpic7', 'Shadowpic8', 'Shadowpic9', 'Shadowpic10', 'Shadowpic11', 'Shadowpic12', 'Shadowpic13', 'Shadowpic14', 'Shadowpic15'], true);
}

// Describe this function...
function ShowPic2() {
  setHTMLElemStyle('left', '-210px', 'verticalmap', true);
  setHTMLElemStyle('visibility', 'visible', 'ShadowpicB2', true);
  setHTMLElemStyle('visibility', 'hidden', ['ShadowpicB1', 'ShadowpicB3', 'ShadowpicB4', 'ShadowpicB5', 'ShadowpicB6', 'ShadowpicB7', 'ShadowpicB8', 'ShadowpicB9', 'ShadowpicB10', 'ShadowpicB11', 'ShadowpicB12', 'ShadowpicB13', 'ShadowpicB14', 'ShadowpicB15'], true);
  setHTMLElemStyle('visibility', 'hidden', ['Shadowpic1', 'Shadowpic3', 'Shadowpic4', 'Shadowpic5', 'Shadowpic6', 'Shadowpic7', 'Shadowpic8', 'Shadowpic9', 'Shadowpic10', 'Shadowpic11', 'Shadowpic12', 'Shadowpic13', 'Shadowpic14', 'Shadowpic15'], true);
}

// Describe this function...
function ShowPic3() {
  setHTMLElemStyle('left', '-420px', 'verticalmap', true);
  setHTMLElemStyle('visibility', 'visible', 'ShadowpicB3', true);
  setHTMLElemStyle('visibility', 'hidden', ['ShadowpicB2', 'ShadowpicB1', 'ShadowpicB4', 'ShadowpicB5', 'ShadowpicB6', 'ShadowpicB7', 'ShadowpicB8', 'ShadowpicB9', 'ShadowpicB10', 'ShadowpicB11', 'ShadowpicB12', 'ShadowpicB13', 'ShadowpicB14', 'ShadowpicB15'], true);
  setHTMLElemStyle('visibility', 'hidden', ['Shadowpic2', 'Shadowpic1', 'Shadowpic4', 'Shadowpic5', 'Shadowpic6', 'Shadowpic7', 'Shadowpic8', 'Shadowpic9', 'Shadowpic10', 'Shadowpic11', 'Shadowpic12', 'Shadowpic13', 'Shadowpic14', 'Shadowpic15'], true);
}

// Describe this function...
function ShowPic4() {
  setHTMLElemStyle('left', '-630px', 'verticalmap', true);
  setHTMLElemStyle('visibility', 'visible', 'ShadowpicB4', true);
  setHTMLElemStyle('visibility', 'hidden', ['ShadowpicB2', 'ShadowpicB1', 'ShadowpicB3', 'ShadowpicB5', 'ShadowpicB6', 'ShadowpicB7', 'ShadowpicB8', 'ShadowpicB9', 'ShadowpicB10', 'ShadowpicB11', 'ShadowpicB12', 'ShadowpicB13', 'ShadowpicB14', 'ShadowpicB15'], true);
  setHTMLElemStyle('visibility', 'hidden', ['Shadowpic2', 'Shadowpic1', 'Shadowpic3', 'Shadowpic5', 'Shadowpic6', 'Shadowpic7', 'Shadowpic8', 'Shadowpic9', 'Shadowpic10', 'Shadowpic11', 'Shadowpic12', 'Shadowpic13', 'Shadowpic14', 'Shadowpic15'], true);
}

// Describe this function...
function ShowPic5() {
  setHTMLElemStyle('left', '-840px', 'verticalmap', true);
  setHTMLElemStyle('visibility', 'visible', 'ShadowpicB5', true);
  setHTMLElemStyle('visibility', 'hidden', ['ShadowpicB2', 'ShadowpicB1', 'ShadowpicB3', 'ShadowpicB4', 'ShadowpicB6', 'ShadowpicB7', 'ShadowpicB8', 'ShadowpicB9', 'ShadowpicB10', 'ShadowpicB11', 'ShadowpicB12', 'ShadowpicB13', 'ShadowpicB14', 'ShadowpicB15'], true);
  setHTMLElemStyle('visibility', 'hidden', ['Shadowpic2', 'Shadowpic1', 'Shadowpic3', 'Shadowpic4', 'Shadowpic6', 'Shadowpic7', 'Shadowpic8', 'Shadowpic9', 'Shadowpic10', 'Shadowpic11', 'Shadowpic12', 'Shadowpic13', 'Shadowpic14', 'Shadowpic15'], true);
}

// Describe this function...
function PerformKnife1() {
  setHTMLElemStyle('display', 'none', 'an_10', false);
  setHTMLElemStyle('visibility', 'hidden', 'ActionTap', true);
  setHTMLElemStyle('visibility', 'hidden', 'Check2', true);

  operateAnimation('PLAY', getAnimations(['GROUP', 'BoltHead']), 0, 150, 'LoopOnce', 1,
          function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    changeVis(['GROUP', 'VisualParts'], true);
    changeVis(['GROUP', 'BoltHead'], false);
    changeVis(['GROUP', 'VisualTool'], false);
    outline('UpMark', 'ENABLE');
    ShowPic2();
    MenuStep = 2;
    setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
  }, undefined, false);

      }

// Describe this function...
function ShowPic6() {
  setHTMLElemStyle('left', '-1050px', 'verticalmap', true);
  setHTMLElemStyle('visibility', 'visible', 'ShadowpicB6', true);
  setHTMLElemStyle('visibility', 'hidden', ['ShadowpicB2', 'ShadowpicB1', 'ShadowpicB3', 'ShadowpicB4', 'ShadowpicB5', 'ShadowpicB7', 'ShadowpicB8', 'ShadowpicB9', 'ShadowpicB10', 'ShadowpicB11', 'ShadowpicB12', 'ShadowpicB13', 'ShadowpicB14', 'ShadowpicB15'], true);
  setHTMLElemStyle('visibility', 'hidden', ['Shadowpic2', 'Shadowpic1', 'Shadowpic3', 'Shadowpic4', 'Shadowpic5', 'Shadowpic7', 'Shadowpic8', 'Shadowpic9', 'Shadowpic10', 'Shadowpic11', 'Shadowpic12', 'Shadowpic13', 'Shadowpic14', 'Shadowpic15'], true);
}

// Describe this function...
function ShowPic7() {
  setHTMLElemStyle('left', '-1260px', 'verticalmap', true);
  setHTMLElemStyle('visibility', 'visible', 'ShadowpicB7', true);
  setHTMLElemStyle('visibility', 'hidden', ['ShadowpicB2', 'ShadowpicB1', 'ShadowpicB3', 'ShadowpicB4', 'ShadowpicB5', 'ShadowpicB6', 'ShadowpicB8', 'ShadowpicB9', 'ShadowpicB10', 'ShadowpicB11', 'ShadowpicB12', 'ShadowpicB13', 'ShadowpicB14', 'ShadowpicB15'], true);
  setHTMLElemStyle('visibility', 'hidden', ['Shadowpic2', 'Shadowpic1', 'Shadowpic3', 'Shadowpic4', 'Shadowpic5', 'Shadowpic6', 'Shadowpic8', 'Shadowpic9', 'Shadowpic10', 'Shadowpic11', 'Shadowpic12', 'Shadowpic13', 'Shadowpic14', 'Shadowpic15'], true);
}

// Describe this function...
function ShowPic8() {
  setHTMLElemStyle('left', '-1470px', 'verticalmap', true);
  setHTMLElemStyle('visibility', 'visible', 'ShadowpicB8', true);
  setHTMLElemStyle('visibility', 'hidden', ['ShadowpicB2', 'ShadowpicB1', 'ShadowpicB3', 'ShadowpicB4', 'ShadowpicB5', 'ShadowpicB6', 'ShadowpicB7', 'ShadowpicB9', 'ShadowpicB10', 'ShadowpicB11', 'ShadowpicB12', 'ShadowpicB13', 'ShadowpicB14', 'ShadowpicB15'], true);
  setHTMLElemStyle('visibility', 'hidden', ['Shadowpic2', 'Shadowpic1', 'Shadowpic3', 'Shadowpic4', 'Shadowpic5', 'Shadowpic6', 'Shadowpic7', 'Shadowpic9', 'Shadowpic10', 'Shadowpic11', 'Shadowpic12', 'Shadowpic13', 'Shadowpic14', 'Shadowpic15'], true);
}

// Describe this function...
function ShowPic9() {
  setHTMLElemStyle('left', '-1680px', 'verticalmap', true);
  setHTMLElemStyle('visibility', 'visible', 'ShadowpicB9', true);
  setHTMLElemStyle('visibility', 'hidden', ['ShadowpicB2', 'ShadowpicB1', 'ShadowpicB3', 'ShadowpicB4', 'ShadowpicB5', 'ShadowpicB6', 'ShadowpicB7', 'ShadowpicB8', 'ShadowpicB10', 'ShadowpicB11', 'ShadowpicB12', 'ShadowpicB13', 'ShadowpicB14', 'ShadowpicB15'], true);
  setHTMLElemStyle('visibility', 'hidden', ['Shadowpic2', 'Shadowpic1', 'Shadowpic3', 'Shadowpic4', 'Shadowpic5', 'Shadowpic6', 'Shadowpic7', 'Shadowpic8', 'Shadowpic10', 'Shadowpic11', 'Shadowpic12', 'Shadowpic13', 'Shadowpic14', 'Shadowpic15'], true);
}

// Describe this function...
function ShowPic10() {
  setHTMLElemStyle('left', '-1890px', 'verticalmap', true);
  setHTMLElemStyle('visibility', 'visible', 'ShadowpicB10', true);
  setHTMLElemStyle('visibility', 'hidden', ['ShadowpicB2', 'ShadowpicB1', 'ShadowpicB3', 'ShadowpicB4', 'ShadowpicB5', 'ShadowpicB6', 'ShadowpicB8', 'ShadowpicB9', 'ShadowpicB7', 'ShadowpicB11', 'ShadowpicB12', 'ShadowpicB13', 'ShadowpicB14', 'ShadowpicB15'], true);
  setHTMLElemStyle('visibility', 'hidden', ['Shadowpic2', 'Shadowpic1', 'Shadowpic3', 'Shadowpic4', 'Shadowpic5', 'Shadowpic6', 'Shadowpic8', 'Shadowpic9', 'Shadowpic7', 'Shadowpic11', 'Shadowpic12', 'Shadowpic13', 'Shadowpic14', 'Shadowpic15'], true);
}

// Describe this function...
function ShowPic11() {
  setHTMLElemStyle('left', '-2100px', 'verticalmap', true);
  setHTMLElemStyle('visibility', 'visible', 'ShadowpicB11', true);
  setHTMLElemStyle('visibility', 'hidden', ['ShadowpicB2', 'ShadowpicB1', 'ShadowpicB3', 'ShadowpicB4', 'ShadowpicB5', 'ShadowpicB6', 'ShadowpicB8', 'ShadowpicB9', 'ShadowpicB10', 'ShadowpicB7', 'ShadowpicB12', 'ShadowpicB13', 'ShadowpicB14', 'ShadowpicB15'], true);
  setHTMLElemStyle('visibility', 'hidden', ['Shadowpic2', 'Shadowpic1', 'Shadowpic3', 'Shadowpic4', 'Shadowpic5', 'Shadowpic6', 'Shadowpic8', 'Shadowpic9', 'Shadowpic10', 'Shadowpic7', 'Shadowpic12', 'Shadowpic13', 'Shadowpic14', 'Shadowpic15'], true);
}

// Describe this function...
function ShowPic12() {
  setHTMLElemStyle('left', '-2310px', 'verticalmap', true);
  setHTMLElemStyle('visibility', 'visible', 'ShadowpicB12', true);
  setHTMLElemStyle('visibility', 'hidden', ['ShadowpicB2', 'ShadowpicB1', 'ShadowpicB3', 'ShadowpicB4', 'ShadowpicB5', 'ShadowpicB6', 'ShadowpicB8', 'ShadowpicB9', 'ShadowpicB10', 'ShadowpicB7', 'ShadowpicB11', 'ShadowpicB13', 'ShadowpicB14', 'ShadowpicB15'], true);
  setHTMLElemStyle('visibility', 'hidden', ['Shadowpic2', 'Shadowpic1', 'Shadowpic3', 'Shadowpic4', 'Shadowpic5', 'Shadowpic6', 'Shadowpic8', 'Shadowpic9', 'Shadowpic10', 'Shadowpic7', 'Shadowpic11', 'Shadowpic13', 'Shadowpic14', 'Shadowpic15'], true);
}

// Describe this function...
function ShowPic13() {
  setHTMLElemStyle('left', '-2520px', 'verticalmap', true);
  setHTMLElemStyle('visibility', 'visible', 'ShadowpicB13', true);
  setHTMLElemStyle('visibility', 'hidden', ['ShadowpicB2', 'ShadowpicB1', 'ShadowpicB3', 'ShadowpicB4', 'ShadowpicB5', 'ShadowpicB6', 'ShadowpicB8', 'ShadowpicB9', 'ShadowpicB10', 'ShadowpicB7', 'ShadowpicB12', 'ShadowpicB11', 'ShadowpicB14', 'ShadowpicB15'], true);
  setHTMLElemStyle('visibility', 'hidden', ['Shadowpic2', 'Shadowpic1', 'Shadowpic3', 'Shadowpic4', 'Shadowpic5', 'Shadowpic6', 'Shadowpic8', 'Shadowpic9', 'Shadowpic10', 'Shadowpic7', 'Shadowpic12', 'Shadowpic11', 'Shadowpic14', 'Shadowpic15'], true);
}

// Describe this function...
function ShowPic14() {
  setHTMLElemStyle('left', '-2730px', 'verticalmap', true);
  setHTMLElemStyle('visibility', 'visible', 'ShadowpicB14', true);
  setHTMLElemStyle('visibility', 'hidden', ['ShadowpicB2', 'ShadowpicB1', 'ShadowpicB3', 'ShadowpicB4', 'ShadowpicB5', 'ShadowpicB6', 'ShadowpicB8', 'ShadowpicB9', 'ShadowpicB10', 'ShadowpicB7', 'ShadowpicB12', 'ShadowpicB13', 'ShadowpicB11', 'ShadowpicB15'], true);
  setHTMLElemStyle('visibility', 'hidden', ['Shadowpic2', 'Shadowpic1', 'Shadowpic3', 'Shadowpic4', 'Shadowpic5', 'Shadowpic6', 'Shadowpic8', 'Shadowpic9', 'Shadowpic10', 'Shadowpic7', 'Shadowpic12', 'Shadowpic13', 'Shadowpic11', 'Shadowpic15'], true);
}

// Describe this function...
function SetKnife2() {
  ShowPic2();
  setHTMLElemStyle('display', 'none', 'an_10', false);
  setHTMLElemStyle('visibility', 'hidden', 'ActionTap_out', true);

  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'AnimatedKnife']), 0, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'VisualTool'], false);
  outline(['ALL_OBJECTS'], 'DISABLE');
  outline('UpMark', 'ENABLE');
  setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
  Split = 0;
  MenuStep = 2;
}

// Describe this function...
function PerformKnife32() {
  setHTMLElemStyle('visibility', 'hidden', 'ActionTap_out', true);
  setHTMLElemStyle('visibility', 'hidden', 'Check2', true);
  changeVis('CleAllenBack', true);
  outline('CleAllenBack', 'ENABLE');

  operateAnimation('PLAY', getAnimations(['GROUP', 'Moulin']), 30, 150, 'LoopOnce', 1,
          function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    changeVis(['GROUP', 'Moulin'], false);
    changeVis(['GROUP', 'VisualTool'], false);
    outline('FenetreCoupe', 'ENABLE');
    ShowPic3();
    MenuStep = 3;
    setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
  }, undefined, false);

      }

// Describe this function...
function PerformKnife2() {
  setHTMLElemStyle('visibility', 'hidden', 'ActionTap', true);
  setHTMLElemStyle('visibility', 'hidden', 'Check2', true);
  setHTMLElemStyle('display', 'none', 'an_10', false);
  changeVis('CleAllenBack', true);
  outline('CleAllenBack', 'ENABLE');

  operateAnimation('PLAY', getAnimations(['GROUP', 'Moulin']), 0, 150, 'LoopOnce', 1,
          function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    changeVis(['GROUP', 'Moulin'], false);
    changeVis(['GROUP', 'VisualTool'], false);
    outline('FenetreCoupe', 'ENABLE');
    ShowPic3();
    MenuStep = 3;
    setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
  }, undefined, false);

      }

// Describe this function...
function SetKnife3() {
  ShowPic3();
  setHTMLElemStyle('display', 'none', 'an_10', false);

  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'AnimatedKnife']), 0, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'Moulin'], false);
  changeVis(['GROUP', 'VisualTool'], false);
  outline(['ALL_OBJECTS'], 'DISABLE');
  outline('FenetreCoupe', 'ENABLE');
  Split = 0;
  MenuStep = 3;
  setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
}

// Describe this function...
function SetKnife33() {
  setHTMLElemStyle('visibility', 'hidden', 'ActionTap_out', true);
  setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
  setHTMLElemStyle('opacity', '1', 'ActionTap', true);
  tweenCamera('CameraKnifeStart', 'FocusKnife', 2, function() {}, 0);

  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'AnimatedKnife']), 1800, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'Moulin'], false);
  changeVis(['GROUP', 'VisualTool'], false);
  outline(['ALL_OBJECTS'], 'DISABLE');
  outline('FenetreCoupe', 'ENABLE');
  ShowPic3();
  Split = 0;
  MenuStep = 3;
}

// Describe this function...
function PerformKnife33() {
  setHTMLElemStyle('visibility', 'hidden', 'ActionTap', true);
  setHTMLElemStyle('visibility', 'hidden', 'Check2', true);
  tweenCamera('CameraKnifeStart', 'FocusKnife', 2, function() {}, 0);
  changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'Moulin'], false);
  changeVis(['GROUP', 'Paper'], false);
  changeVis(['GROUP', 'VisualTool'], false);

  operateAnimation('PLAY', getAnimations('FenetreCoupe'), 1800, 1850, 'LoopOnce', 1,
          function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    tweenCamera('CameraReplace', 'FocusKnife', 2, function() {}, 0);
    outline(['KnifeLockL', 'KnifelockR'], 'ENABLE');
    ShowPic4();
    MenuStep = 4;
    setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
  }, undefined, false);

      }

// Describe this function...
function PerformKnife3() {
  setHTMLElemStyle('display', 'none', 'an_10', false);
  setHTMLElemStyle('visibility', 'hidden', 'Check2', true);
  setHTMLElemStyle('visibility', 'hidden', 'ActionTap', true);
  changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'Moulin'], false);
  changeVis(['GROUP', 'Paper'], false);
  changeVis(['GROUP', 'VisualTool'], false);

  operateAnimation('PLAY', getAnimations('FenetreCoupe'), 0, 50, 'LoopOnce', 1,
          function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    changeVis(['GROUP', 'Deblocage'], true);
    outline(['GROUP', 'Deblocage'], 'ENABLE');
    ShowPic4();
    MenuStep = 4;
    setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
  }, undefined, false);

      }

// Describe this function...
function SetKnife43() {
  setHTMLElemStyle('visibility', 'hidden', 'ActionTap_out', true);
  setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
  setHTMLElemStyle('opacity', '1', 'ActionTap', true);
  tweenCamera('CameraKnifeStart', 'FocusKnife', 2, function() {}, 0);

  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'AnimatedKnife']), 1800, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'Moulin'], false);
  changeVis(['GROUP', 'VisualTool'], false);
  outline(['ALL_OBJECTS'], 'DISABLE');
  outline('FenetreCoupe', 'ENABLE');
  ShowPic3();
  Split = 0;
  MenuStep = 3;
}

// Describe this function...
function PerformKnife43() {
  setHTMLElemStyle('visibility', 'hidden', 'ActionTap', true);
  setHTMLElemStyle('visibility', 'hidden', 'Check2', true);
  tweenCamera('CameraKnifeStart', 'FocusKnife', 2, function() {}, 0);
  changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'Moulin'], false);
  changeVis(['GROUP', 'Paper'], false);
  changeVis(['GROUP', 'VisualTool'], false);

  operateAnimation('PLAY', getAnimations('FenetreCoupe'), 1800, 1850, 'LoopOnce', 1,
          function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    tweenCamera('CameraReplace', 'FocusKnife', 2, function() {}, 0);
    outline(['StaticBoltL', 'StaticBoltR'], 'ENABLE');
    ShowPic4();
    MenuStep = 4;
    setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
  }, undefined, false);

      }

// Describe this function...
function SetKnife34() {
  tweenCamera('CameraReplace', 'FocusKnife', 2, function() {}, 0);

  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'ReplaceBlade']), 1850, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'Moulin'], false);
  changeVis(['GROUP', 'VisualTool'], false);
  outline(['ALL_OBJECTS'], 'DISABLE');
  outline(['KnifeLockL', 'KnifelockR'], 'ENABLE');
  ShowPic4();
  Split = 0;
  MenuStep = 4;
  setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
}

// Describe this function...
function SetKnife4() {
  ShowPic4();
  setHTMLElemStyle('display', 'none', 'an_10', false);

  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'AnimatedKnife']), 0, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'FenetreCoupe', 100, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'VisualTool'], false);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'Moulin'], false);
  changeVis('CleAllenLock', true);
  outline(['ALL_OBJECTS'], 'DISABLE');
  outline(['GROUP', 'Deblocage'], 'ENABLE');
  Split = 0;
  MenuStep = 4;
  setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
}

// Describe this function...
function SetKnife44() {
  tweenCamera('CameraReplace', 'FocusKnife', 2, function() {}, 0);

  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'ReplaceBlade']), 1850, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'Moulin'], false);
  changeVis(['GROUP', 'VisualTool'], false);
  outline(['ALL_OBJECTS'], 'DISABLE');
  outline(['StaticBoltL', 'StaticBoltR'], 'ENABLE');
  ShowPic4();
  Split = 0;
  MenuStep = 4;
  setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
}

// Describe this function...
function PerformKnife34() {
  setHTMLElemStyle('visibility', 'hidden', 'ActionTap', true);
  setHTMLElemStyle('visibility', 'hidden', 'Check2', true);
  tweenCamera('CameraReplace', 'FocusKnife', 2, function() {}, 0);
  changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'VisualTool'], false);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'Moulin'], false);

  operateAnimation('PLAY', getAnimations(['GROUP', 'ReplaceStationery']), 1850, 1950, 'LoopOnce', 1,
          function() {
    tweenCamera('CameraKnifeStart', 'FocusKnife', 2, function() {}, 0);
    outline(['ALL_OBJECTS'], 'DISABLE');
    changeVis(['KnifeLockL', 'KnifelockR', 'KnifeWashL', 'KnifeWashR'], false);
    outline('BloLameFixe', 'ENABLE');
    ShowPic5();
    MenuStep = 5;
    Split = 1;
    setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
  }, undefined, false);

      }

// Describe this function...
function PerformKnife4() {
  setHTMLElemStyle('visibility', 'hidden', 'ActionTap', true);
  setHTMLElemStyle('visibility', 'hidden', 'Check2', true);
  setHTMLElemStyle('display', 'none', 'an_10', false);
  changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'VisualTool'], false);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'Moulin'], false);
  changeVis('CleAllenLock', true);

  operateAnimation('PLAY', getAnimations(['GROUP', 'Deblocage']), 0, 225, 'LoopOnce', 1,
          function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    changeVis('CleAllenLock', false);
    changeVis(['GROUP', 'Relachement'], true);
    outline(['GROUP', 'Relachement'], 'ENABLE');
    ShowPic5();
    MenuStep = 5;
    setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
  }, undefined, false);

      }

// Describe this function...
function PerformKnife44() {
  setHTMLElemStyle('visibility', 'hidden', 'ActionTap', true);
  setHTMLElemStyle('visibility', 'hidden', 'Check2', true);
  tweenCamera('CameraReplace', 'FocusKnife', 2, function() {}, 0);
  changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'VisualTool'], false);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'Moulin'], false);

  operateAnimation('PLAY', getAnimations(['GROUP', 'ReplaceGuillotine']), 1850, 1950, 'LoopOnce', 1,
          function() {
    tweenCamera('CameraMainStart', 'FocusKnife', 2, function() {}, 0);
    outline(['ALL_OBJECTS'], 'DISABLE');
    changeVis(['StaticBoltL', 'StaticBoltR'], false);
    outline('FenetreCoupe', 'ENABLE');
    ShowPic5();
    MenuStep = 5;
    Split = 1;
    setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
  }, undefined, false);

      }

// Describe this function...
function SetKnife5() {
  setHTMLElemStyle('display', 'none', 'an_10', false);

  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'AnimatedKnife']), 0, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'FenetreCoupe', 100, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'VisualTool'], false);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'Paper'], false);
  changeVis(['GROUP', 'Moulin'], false);
  changeVis('CleAllenRegul', true);
  outline(['ALL_OBJECTS'], 'DISABLE');
  outline(['GROUP', 'Relachement'], 'ENABLE');
  ShowPic5();
  Split = 0;
  MenuStep = 5;
  setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
}

// Describe this function...
function SetKnife35() {
  setHTMLElemStyle('visibility', 'hidden', 'ActionTap_out', true);
  tweenCamera('CameraKnifeStart', 'FocusKnife', 2, function() {}, 0);

  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'ReplaceStationery']), 1950, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'VisualTool'], false);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'Moulin'], false);
  changeVis(['KnifeLockL', 'KnifelockR', 'KnifeWashL', 'KnifeWashR'], false);
  outline(['ALL_OBJECTS'], 'DISABLE');
  outline('BloLameFixe', 'ENABLE');
  ShowPic5();
  MenuStep = 5;
  Split = 1;
  setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
}

// Describe this function...
function SetKnife45() {
  setHTMLElemStyle('visibility', 'hidden', 'ActionTap_out', true);
  tweenCamera('CameraMainStart', 'FocusKnife', 2, function() {}, 0);

  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'ReplaceGuillotine']), 1950, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'VisualTool'], false);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'Moulin'], false);
  changeVis(['StaticBoltL', 'StaticBoltR'], false);
  outline(['ALL_OBJECTS'], 'DISABLE');
  outline('FenetreCoupe', 'ENABLE');
  ShowPic5();
  MenuStep = 5;
  Split = 1;
  setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
}

// Describe this function...
function PerformKnife35() {
  setHTMLElemStyle('visibility', 'hidden', 'Check2', true);
  setHTMLElemStyle('visibility', 'hidden', 'ActionTap', true);
  changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'Moulin'], false);
  changeVis(['GROUP', 'VisualTool'], false);
  changeVis(['KnifeLockL', 'KnifelockR', 'KnifeWashL', 'KnifeWashR'], false);

  operateAnimation('PLAY', getAnimations(['GROUP', 'ReplaceStationery']), 1950, 2000, 'LoopOnce', 1,
          function() {
    tweenCamera('CameraKnifeStart', 'FocusKnife', 2, function() {
      ShowPic6();
      MenuStep = 6;
      Split = 2;
      setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
    }, 0);
    outline(['ALL_OBJECTS'], 'DISABLE');
    outline(['GROUP', 'StationaryKnife'], 'ENABLE');
  }, undefined, false);

      }

// Describe this function...
function PerformKnife5() {
  setHTMLElemStyle('display', 'none', 'an_10', false);
  setHTMLElemStyle('visibility', 'hidden', 'Check2', true);
  setHTMLElemStyle('visibility', 'hidden', 'ActionTap', true);

  operateAnimation('SET_FRAME', 'FenetreCoupe', 100, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'Moulin'], false);
  changeVis(['GROUP', 'VisualTool'], false);
  changeVis('CleAllenRegul', true);

  operateAnimation('PLAY', getAnimations(['GROUP', 'Relachement']), 0, 150, 'LoopOnce', 1,
          function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    changeVis('CleAllenRegul', false);
    changeVis(['GROUP', 'Deverrouillage'], true);
    outline(['GROUP', 'Deverrouillage'], 'ENABLE');
    ShowPic6();
    MenuStep = 6;
    setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
  }, undefined, false);

      }

// Describe this function...
function PerformKnife45() {
  setHTMLElemStyle('visibility', 'hidden', 'ActionTap', true);
  setHTMLElemStyle('visibility', 'hidden', 'Check2', true);
  changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'Moulin'], false);
  changeVis(['GROUP', 'VisualTool'], false);
  changeVis(['StaticBoltL', 'StaticBoltR'], false);

  operateAnimation('PLAY', getAnimations(['GROUP', 'ReplaceGuillotine']), 1950, 2000, 'LoopOnce', 1,
          function() {
    tweenCamera('CameraMainStart', 'FocusKnife', 2, function() {
      ShowPic6();
      MenuStep = 6;
      Split = 2;
      setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
    }, 0);
    outline(['ALL_OBJECTS'], 'DISABLE');
    outline(['GROUP', 'GuillotineKnike'], 'ENABLE');
  }, undefined, false);

      }

// Describe this function...
function SetKnife6() {
  setHTMLElemStyle('display', 'none', 'an_10', false);

  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'AnimatedKnife']), 180, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'Blademove']), 0, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'VisualTool'], false);
  changeVis(['GROUP', 'Moulin'], false);
  outline(['ALL_OBJECTS'], 'DISABLE');
  outline(['GROUP', 'Deverrouillage'], 'ENABLE');
  ShowPic6();
  Split = 0;
  MenuStep = 6;
  setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
}

// Describe this function...
function SetKnife36() {
  tweenCamera('CameraKnifeStart', 'FocusKnife', 2, function() {}, 0);

  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'ReplaceStationery']), 2000, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'VisualTool'], false);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'Moulin'], false);
  changeVis(['KnifeLockL', 'KnifelockR', 'KnifeWashL', 'KnifeWashR'], false);
  outline(['ALL_OBJECTS'], 'DISABLE');
  outline(['GROUP', 'StationaryKnife'], 'ENABLE');
  ShowPic6();
  MenuStep = 6;
  Split = 2;
  setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
}

// Describe this function...
function PerformKnife6() {
  setHTMLElemStyle('display', 'none', 'an_10', false);
  setHTMLElemStyle('visibility', 'hidden', 'Check2', true);
  setHTMLElemStyle('visibility', 'hidden', 'ActionTap', true);
  changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'VisualTool'], false);
  changeVis(['GROUP', 'Moulin'], false);

  operateAnimation('PLAY', getAnimations(['GROUP', 'Deverrouillage']), 0, 80, 'LoopOnce', 1,
          function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    outline(['Arrows', 'Arrows.001'], 'ENABLE');

    operateAnimation('PLAY', ['Arrows', 'Arrows.001'], null, null, 'AUTO', 1,
            function() {}, undefined, false);

        ShowPic7();
    MenuStep = 7;
    setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
  }, undefined, false);

      }

// Describe this function...
function SetKnife46() {
  tweenCamera('CameraMainStart', 'FocusKnife', 2, function() {}, 0);

  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'ReplaceGuillotine']), 2000, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'VisualTool'], false);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'Moulin'], false);
  changeVis(['StaticBoltL', 'StaticBoltR'], false);
  outline(['ALL_OBJECTS'], 'DISABLE');
  outline(['GROUP', 'GuillotineKnike'], 'ENABLE');
  ShowPic6();
  MenuStep = 6;
  Split = 2;
  setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
}

// Describe this function...
function PerformKnife36() {
  setHTMLElemStyle('visibility', 'hidden', 'ActionTap', true);
  setHTMLElemStyle('visibility', 'hidden', 'Check2', true);
  changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'Moulin'], false);
  changeVis(['GROUP', 'VisualTool'], false);
  changeVis(['KnifeLockL', 'KnifelockR', 'KnifeWashL', 'KnifeWashR'], false);

  operateAnimation('PLAY', getAnimations(['GROUP', 'ReplaceStationery']), 2000, 2130, 'LoopOnce', 1,
          function() {
    tweenCamera('CameraKnifeStart', 'FocusKnife', 2, function() {
      outline(['ALL_OBJECTS'], 'DISABLE');
      MenuStep = 7;
      Split = 3;
    }, 0);
  }, undefined, false);

      }

// Describe this function...
function SetKnife7() {
  setHTMLElemStyle('display', 'none', 'an_10', false);
  setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);

  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'AnimatedKnife']), 180, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'Deverrouillage']), 80, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'Blademove']), 0, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'VisualTool'], false);
  changeVis(['GROUP', 'Moulin'], false);
  outline(['ALL_OBJECTS'], 'DISABLE');
  outline(['Arrows', 'Arrows.001'], 'ENABLE');

  operateAnimation('PLAY', ['Arrows', 'Arrows.001'], null, null, 'AUTO', 1,
          function() {}, undefined, false);

      ShowPic7();
  Split = 0;
  MenuStep = 7;
}

// Describe this function...
function PerformKnife46() {
  setHTMLElemStyle('visibility', 'hidden', 'ActionTap', true);
  setHTMLElemStyle('visibility', 'hidden', 'Check2', true);
  changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'Moulin'], false);
  changeVis(['GROUP', 'VisualTool'], false);
  changeVis(['StaticBoltL', 'StaticBoltR'], false);

  operateAnimation('PLAY', getAnimations(['GROUP', 'ReplaceGuillotine']), 2000, 2130, 'LoopOnce', 1,
          function() {
    tweenCamera('CameraMainStart', 'FocusKnife', 2, function() {
      outline(['ALL_OBJECTS'], 'DISABLE');
      MenuStep = 7;
      Split = 4;
    }, 0);
  }, undefined, false);

      }

// Describe this function...
function PerformKnife7() {
  setHTMLElemStyle('display', 'none', 'an_10', false);
  setHTMLElemStyle('visibility', 'hidden', 'Check2', true);
  setHTMLElemStyle('visibility', 'hidden', 'ActionTap', true);
  changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'VisualTool'], false);
  changeVis(['GROUP', 'Moulin'], false);

  operateAnimation('PLAY', getAnimations(['GROUP', 'Blademove']), 0, 120, 'LoopOnce', 1,
          function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    outline(['GROUP', 'Deverrouillage'], 'ENABLE');
    MenuStep = 8;
    ShowPic8();
    setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
  }, undefined, false);

      }

// Describe this function...
function SetKnife8() {
  setHTMLElemStyle('display', 'none', 'an_10', false);
  setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);

  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'AnimatedKnife']), 180, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'Deverrouillage']), 150, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'VisualTool'], false);
  changeVis(['GROUP', 'Moulin'], false);
  outline(['ALL_OBJECTS'], 'DISABLE');
  outline(['GROUP', 'Deverrouillage'], 'ENABLE');
  ShowPic8();
  Split = 0;
  MenuStep = 8;
}

// Describe this function...
function PerformKnife8() {
  setHTMLElemStyle('display', 'none', 'an_10', false);
  setHTMLElemStyle('visibility', 'hidden', 'Check2', true);
  setHTMLElemStyle('visibility', 'hidden', 'ActionTap', true);
  changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'Paper'], false);
  changeVis(['GROUP', 'Moulin'], false);
  changeVis(['GROUP', 'VisualTool'], false);

  operateAnimation('PLAY', getAnimations(['GROUP', 'Deverrouillage']), 150, 200, 'LoopOnce', 1,
          function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    outline('FenetreCoupe', 'ENABLE');
    ShowPic9();
    MenuStep = 9;
    setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
  }, undefined, false);

      }

// Describe this function...
function SetKnife9() {
  setHTMLElemStyle('display', 'none', 'an_10', false);
  setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);

  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'AnimatedKnife']), 200, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'VisualTool'], false);
  changeVis(['GROUP', 'Moulin'], false);
  outline(['ALL_OBJECTS'], 'DISABLE');
  outline('FenetreCoupe', 'ENABLE');
  ShowPic9();
  Split = 0;
  MenuStep = 9;
}

// Describe this function...
function PerformKnife9() {
  setHTMLElemStyle('display', 'none', 'an_10', false);
  setHTMLElemStyle('visibility', 'hidden', 'Check2', true);
  setHTMLElemStyle('visibility', 'hidden', 'ActionTap', true);

  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'AnimatedKnife']), 200, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'Moulin'], false);
  changeVis(['GROUP', 'VisualTool'], false);
  registerSetTimeout(0.5, function() {
    changeVis('CleAllenRegul', true);
    registerSetTimeout(1, function() {
      outline(['ALL_OBJECTS'], 'DISABLE');
      outline('CleAllenRegul', 'ENABLE');

      operateAnimation('PLAY', getAnimations(['GROUP', 'Serragefin']), 200, 530, 'LoopOnce', 1,
              function() {
        outline('CleAllenRegul', 'DISABLE');
        changeVis('CleAllenRegul', false);
        changeVis('PaperFold', true);
        outline('PaperFold', 'ENABLE');
        ShowPic10();
        MenuStep = 10;
        setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
      }, undefined, false);

          });
  });
}

// Describe this function...
function SetKnife10() {
  setHTMLElemStyle('display', 'none', 'an_10', false);
  setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);

  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'AnimatedKnife']), 530, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'VisualTool'], false);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'Moulin'], false);
  changeVis('PaperFold', true);
  outline(['ALL_OBJECTS'], 'DISABLE');
  outline('PaperFold', 'ENABLE');
  ShowPic10();
  Split = 0;
  MenuStep = 10;
}

// Describe this function...
function PerformKnife10() {
  setHTMLElemStyle('display', 'none', 'an_10', false);
  setHTMLElemStyle('visibility', 'hidden', 'Check2', true);
  setHTMLElemStyle('visibility', 'hidden', 'ActionTap', true);

  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'AnimatedKnife']), 530, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'Moulin'], false);
  changeVis(['GROUP', 'VisualTool'], false);
  changeVis('PaperFold', true);
  outline(['ALL_OBJECTS'], 'DISABLE');

  operateAnimation('PLAY', getAnimations(['GROUP', 'PaperTest']), 530, 573, 'LoopOnce', 1,
          function() {
    changeVis('PaperFold', false);
    changeVis('PaperCut', true);
    changeVis('PaperFall', true);

    operateAnimation('PLAY', getAnimations(['GROUP', 'PaperTest']), 574, 650, 'LoopOnce', 1,
            function() {
      changeVis(['GROUP', 'Paper'], false);
      outline(['GROUP', 'Deverrouillage'], 'ENABLE');
      ShowPic11();
      MenuStep = 11;
      setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
    }, undefined, false);

        }, undefined, false);

      }

// Describe this function...
function SetKnife11() {
  setHTMLElemStyle('display', 'none', 'an_10', false);

  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'AnimatedKnife']), 680, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'VisualTool'], false);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'Moulin'], false);
  outline(['ALL_OBJECTS'], 'DISABLE');
  outline(['GROUP', 'Deverrouillage'], 'ENABLE');
  ShowPic11();
  Split = 0;
  MenuStep = 11;
  setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
}

// Describe this function...
function PerformKnife11() {
  setHTMLElemStyle('display', 'none', 'an_10', false);
  setHTMLElemStyle('visibility', 'hidden', 'Check2', true);
  setHTMLElemStyle('visibility', 'hidden', 'ActionTap', true);
  changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'VisualTool'], false);
  changeVis(['GROUP', 'Moulin'], false);
  outline(['ALL_OBJECTS'], 'DISABLE');
  outline(['GROUP', 'Deverrouillage'], 'ENABLE');

  operateAnimation('PLAY', getAnimations(['GROUP', 'Deverrouillage']), 680, 720, 'LoopOnce', 1,
          function() {
    registerSetTimeout(0.5, function() {
      changeVis(['GROUP', 'VisualParts'], true);
      changeVis(['GROUP', 'BoltHead'], false);
      changeVis(['GROUP', 'VisualTool'], false);
      outline(['ALL_OBJECTS'], 'DISABLE');
      changeVis(['GROUP', 'Deblocage'], true);
      outline(['GROUP', 'Deblocage'], 'ENABLE');
    });

    operateAnimation('PLAY', getAnimations(['GROUP', 'Deblocage']), 720, 940, 'LoopOnce', 1,
            function() {
      registerSetTimeout(0.5, function() {
        changeVis(['GROUP', 'VisualParts'], true);
        changeVis(['GROUP', 'BoltHead'], false);
        changeVis(['GROUP', 'VisualTool'], false);
        outline(['ALL_OBJECTS'], 'DISABLE');
        changeVis('CleAllenLock', false);

        operateAnimation('PLAY', getAnimations(['GROUP', 'AnimatedKnife']), 930, 970, 'AUTO', 1,
                function() {
          changeVis('PaperFold', true);
          outline('PaperFold', 'ENABLE');
          ShowPic12();
          MenuStep = 12;
          setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
        }, undefined, false);

            });
    }, undefined, false);

        }, undefined, false);

      }

// Describe this function...
function SetKnife12() {
  setHTMLElemStyle('display', 'none', 'an_10', false);

  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'AnimatedKnife']), 970, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'VisualTool'], false);
  changeVis(['GROUP', 'Moulin'], false);
  changeVis('PaperFold', true);
  outline(['ALL_OBJECTS'], 'DISABLE');
  outline('PaperFold', 'ENABLE');
  ShowPic12();
  Split = 0;
  MenuStep = 12;
  setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
}

// Describe this function...
function PerformKnife12() {
  setHTMLElemStyle('display', 'none', 'an_10', false);
  setHTMLElemStyle('visibility', 'hidden', 'Check2', true);
  setHTMLElemStyle('visibility', 'hidden', 'ActionTap', true);
  changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'Moulin'], false);
  changeVis(['GROUP', 'VisualTool'], false);
  changeVis('PaperFold', true);
  outline(['ALL_OBJECTS'], 'DISABLE');

  operateAnimation('PLAY', getAnimations(['GROUP', 'PaperTest']), 970, 1043, 'LoopOnce', 1,
          function() {
    changeVis('PaperFold', false);
    changeVis('PaperCut', true);
    changeVis('PaperFall', true);

    operateAnimation('PLAY', getAnimations(['GROUP', 'PaperTest']), 1044, 1120, 'LoopOnce', 1,
            function() {
      changeVis(['GROUP', 'Paper'], false);
      outline(['ALL_OBJECTS'], 'DISABLE');
      outline('FenetreCoupe', 'ENABLE');
      ShowPic13();
      MenuStep = 13;
      setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
    }, undefined, false);

        }, undefined, false);

      }

// Describe this function...
function SetKnife13() {
  setHTMLElemStyle('display', 'none', 'an_10', false);

  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'AnimatedKnife']), 1200, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'VisualTool'], false);
  changeVis(['GROUP', 'BoltHead'], false);
  changeVis(['GROUP', 'Moulin'], false);
  outline(['ALL_OBJECTS'], 'DISABLE');
  outline('FenetreCoupe', 'ENABLE');
  ShowPic13();
  Split = 0;
  MenuStep = 13;
  setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
}

// Describe this function...
function PerformKnife13() {
  setHTMLElemStyle('visibility', 'hidden', 'ActionTap', true);
  setHTMLElemStyle('visibility', 'hidden', 'Check2', true);

  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'AnimatedKnife']), 1200, null, 'AUTO', 1,
          function() {}, undefined, false);

      outline(['ALL_OBJECTS'], 'DISABLE');
  changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'VisualTool'], false);
  changeVis(['GROUP', 'Moulin'], true);
  changeVis(['GROUP', 'BoltHead'], false);
  outline(['GROUP', 'Moulin'], 'ENABLE');

  operateAnimation('PLAY', getAnimations(['GROUP', 'MoulinAnime']), 1200, 1300, 'LoopOnce', 1,
          function() {
    changeVis(['GROUP', 'VisualParts'], true);
    changeVis(['GROUP', 'BoltHead'], false);
    changeVis(['GROUP', 'VisualTool'], false);
    changeVis(['GROUP', 'Moulin'], true);
    outline(['ALL_OBJECTS'], 'DISABLE');
    outline(['GROUP', 'Moulin'], 'ENABLE');
    registerSetTimeout(0.5, function() {

      operateAnimation('PLAY', getAnimations(['GROUP', 'AnimatedKnife']), 1440, 1600, 'AUTO', 1,
              function() {
        tweenCamera('CameraMainStart', 'FocusKnife', 2, function() {
          changeVis(['GROUP', 'BoltHead'], true);
          outline(['ALL_OBJECTS'], 'DISABLE');
          outline(['GROUP', 'BoltHead'], 'ENABLE');
          setHTMLElemStyle('display', 'block', 'an_10', false);
          ShowPic14();
          MenuStep = 14;
          setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
        }, 0);
      }, undefined, false);

          });
  }, undefined, false);

      }

// Describe this function...
function SetKnife14() {
  setHTMLElemStyle('display', 'block', 'an_10', false);

  operateAnimation('SET_FRAME', getAnimations(['GROUP', 'AnimatedKnife']), 1600, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'VisualTool'], false);
  outline(['ALL_OBJECTS'], 'DISABLE');
  tweenCamera('CameraMainStart', 'FocusKnife', 2, function() {
    outline(['GROUP', 'BoltHead'], 'ENABLE');
    ShowPic14();
    Split = 0;
    MenuStep = 14;
    setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
  }, 0);
}

// Describe this function...
function PerformKnife14() {
  setHTMLElemStyle('visibility', 'hidden', 'ActionTap', true);
  setHTMLElemStyle('display', 'none', 'an_10', false);
  changeVis(['GROUP', 'VisualParts'], true);
  changeVis(['GROUP', 'VisualTool'], false);
  outline(['GROUP', 'BoltHead'], 'DISABLE');

  operateAnimation('PLAY', getAnimations(['GROUP', 'BoltHead']), 1600, 1700, 'LoopOnce', 1,
          function() {
    changeVis(['GROUP', 'BoltHead'], true);
    outline(['ALL_OBJECTS'], 'DISABLE');
    MenuStep = 15;
  }, undefined, false);

      }


'Intro';
eventHTMLElem('click', 'retap_0', true, function(event) {
  if (avantouvert == true) {
    CloseFront();
  }
  MenuStep = 0;
});
eventHTMLElem('touchstart', 'retap_0', true, function(event) {
  if (avantouvert == true) {
    CloseFront();
  }
  MenuStep = 0;
});

'Etats initiaux';
changeVis(['GROUP', 'VisualTool'], false);
Split = 0;
avantouvert = false;
ArriereOuvert = false;
MenuBase = 0;
MenuStep = 0;
bloom(1.2, 0.2, 1.5);
registerSetTimeout(1, function() {
  tweenCamera('CameraMainStart', 'FocusMain', 2, function() {}, 0);
});

'OuvertureCapot';

'TouchStartmenu';

'clicmenu';

'clicmenu';
eventHTMLElem('click', 'tap_exitcontent', true, function(event) {
  Reboot();
  setHTMLElemStyle('visibility', 'visible', 'Check2', true);
  setHTMLElemStyle('visibility', 'hidden', ['picocon1', 'picocon2', 'picocon3', 'picocon4', 'picocon5', 'picocon6', 'picocon7', 'picocon8', 'picocon9', 'picocon10', 'picocon11', 'picocon12', 'picocon13', 'picocon14', 'picocon15'], true);
  setHTMLElemStyle('visibility', 'hidden', 'Title3', true);
  setHTMLElemStyle('visibility', 'hidden', 'Title2', true);
  setHTMLElemStyle('visibility', 'hidden', 'Title1', true);
  setHTMLElemStyle('visibility', 'visible', 'Title0', true);
  setHTMLElemStyle('display', 'none', 'an_10', false);
});

'TouchStartmenu';
eventHTMLElem('touchstart', 'tap_exitcontent', true, function(event) {
  Reboot();
  setHTMLElemStyle('visibility', 'visible', 'Check2', true);
  setHTMLElemStyle('visibility', 'hidden', ['picocon1', 'picocon2', 'picocon3', 'picocon4', 'picocon5', 'picocon6', 'picocon7', 'picocon8', 'picocon9', 'picocon10', 'picocon11', 'picocon12', 'picocon13', 'picocon14', 'picocon15'], true);
  setHTMLElemStyle('visibility', 'hidden', 'Title3', true);
  setHTMLElemStyle('visibility', 'hidden', 'Title2', true);
  setHTMLElemStyle('visibility', 'hidden', 'Title1', true);
  setHTMLElemStyle('visibility', 'visible', 'Title0', true);
  setHTMLElemStyle('display', 'none', 'an_10', false);
});

'Selecteursynchro outline';
eventHTMLElem('pointerover', 'tap_One', true, function(event) {
  outline('BloLameFixe', 'ENABLE');
  outline('FenetreCoupe', 'ENABLE');
});
eventHTMLElem('pointerout', 'tap_One', true, function(event) {
  outline('BloLameFixe', 'DISABLE');
  outline('FenetreCoupe', 'DISABLE');
});
eventHTMLElem('pointerover', 'tap_two', true, function(event) {
  outline('LameFixe', 'ENABLE');
});
eventHTMLElem('pointerout', 'tap_two', true, function(event) {
  outline('LameFixe', 'DISABLE');
});
eventHTMLElem('pointerover', 'tap_Three', true, function(event) {
  outline('Guillotine', 'ENABLE');
});
eventHTMLElem('pointerover', 'tap_Three', true, function(event) {
  outline('Guillotine', 'DISABLE');
});

'TouchStartmenu';
eventHTMLElem('touchstart', 'tap_One', true, function(event) {
  setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
  if (avantouvert == false) {
    OpenFront();
  }
  ShowPic1();
  MenuBase = 2;
  MenuStep = 1;
  setHTMLElemStyle('visibility', 'visible', ['picocon1', 'picocon2', 'picocon3', 'picocon4', 'picocon5', 'picocon6', 'picocon7', 'picocon8', 'picocon9', 'picocon10', 'picocon11', 'picocon12', 'picocon13', 'picocon14'], true);
  setHTMLElemStyle('visibility', 'hidden', 'Title2', true);
  setHTMLElemStyle('visibility', 'hidden', 'Title3', true);
  setHTMLElemStyle('visibility', 'visible', 'Title1', true);
  setHTMLElemStyle('visibility', 'hidden', 'Title0', true);
  setHTMLElemStyle('top', '0px', 'verticalmap', true);
});

'clicmenu';
eventHTMLElem('click', 'tap_One', true, function(event) {
  setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
  if (avantouvert == false) {
    OpenFront();
  }
  ShowPic1();
  MenuBase = 2;
  MenuStep = 1;
  setHTMLElemStyle('visibility', 'visible', ['picocon1', 'picocon2', 'picocon3', 'picocon4', 'picocon5', 'picocon6', 'picocon7', 'picocon8', 'picocon9', 'picocon10', 'picocon11', 'picocon12', 'picocon13', 'picocon14'], true);
  setHTMLElemStyle('visibility', 'hidden', 'Title2', true);
  setHTMLElemStyle('visibility', 'hidden', 'Title3', true);
  setHTMLElemStyle('visibility', 'visible', 'Title1', true);
  setHTMLElemStyle('visibility', 'hidden', 'Title0', true);
  setHTMLElemStyle('top', '0px', 'verticalmap', true);
});

'Enterexit_Knifesetting';
eventHTMLElem('click', ['tap_One', 'tap_two', 'tap_Three'], true, function(event) {
  if (avantouvert == false) {
    OpenFront();
  }
  tweenCamera('CameraKnifeStart', 'FocusKnife', 2, function() {
    changeVis(['GROUP', 'VisualParts'], true);
    changeVis(['GROUP', 'VisualTool'], false);
    outline(['GROUP', 'BoltHead'], 'ENABLE');
    outline('CoiffeLock', 'DISABLE');
  }, 0);
});
eventHTMLElem('touchstart', ['tap_One', 'tap_two', 'tap_Three'], true, function(event) {
  if (avantouvert == false) {
    OpenFront();
  }
  tweenCamera('CameraKnifeStart', 'FocusKnife', 2, function() {
    changeVis(['GROUP', 'VisualParts'], true);
    changeVis(['GROUP', 'VisualTool'], false);
    outline(['GROUP', 'BoltHead'], 'ENABLE');
    outline('CoiffeLock', 'DISABLE');
  }, 0);
});

eventHTMLElem('touchstart', 'tap_two', true, function(event) {
  setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
  if (avantouvert == false) {
    OpenFront();
  }
  ShowPic1();
  MenuBase = 3;
  MenuStep = 1;
  setHTMLElemStyle('visibility', 'visible', ['picocon1', 'picocon2', 'picocon3', 'picocon4', 'picocon5', 'picocon6'], true);
  setHTMLElemStyle('visibility', 'visible', 'Title2', true);
  setHTMLElemStyle('visibility', 'hidden', 'Title3', true);
  setHTMLElemStyle('visibility', 'hidden', 'Title1', true);
  setHTMLElemStyle('visibility', 'hidden', 'Title0', true);
  setHTMLElemStyle('top', '-250px', 'verticalmap', true);
});

eventHTMLElem('click', 'tap_two', true, function(event) {
  setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
  if (avantouvert == false) {
    OpenFront();
  }
  ShowPic1();
  MenuBase = 3;
  MenuStep = 1;
  setHTMLElemStyle('visibility', 'visible', ['picocon1', 'picocon2', 'picocon3', 'picocon4', 'picocon5', 'picocon6'], true);
  setHTMLElemStyle('visibility', 'visible', 'Title2', true);
  setHTMLElemStyle('visibility', 'hidden', 'Title3', true);
  setHTMLElemStyle('visibility', 'hidden', 'Title1', true);
  setHTMLElemStyle('visibility', 'hidden', 'Title0', true);
  setHTMLElemStyle('top', '-250px', 'verticalmap', true);
});

eventHTMLElem('touchstart', 'tap_Three', true, function(event) {
  setHTMLElemStyle('visibility', 'visible', 'Check2', true);
  if (avantouvert == false) {
    OpenFront();
  }
  ShowPic1();
  MenuBase = 4;
  MenuStep = 1;
  setHTMLElemStyle('visibility', 'visible', ['picocon1', 'picocon2', 'picocon3', 'picocon4', 'picocon5', 'picocon6'], true);
  setHTMLElemStyle('visibility', 'visible', 'Title3', true);
  setHTMLElemStyle('visibility', 'hidden', 'Title2', true);
  setHTMLElemStyle('visibility', 'hidden', 'Title1', true);
  setHTMLElemStyle('visibility', 'hidden', 'Title0', true);
  setHTMLElemStyle('top', '-500px', 'verticalmap', true);
});

eventHTMLElem('click', 'tap_Three', true, function(event) {
  setHTMLElemStyle('visibility', 'visible', 'ActionTap', true);
  if (avantouvert == false) {
    OpenFront();
  }
  ShowPic1();
  MenuBase = 4;
  MenuStep = 1;
  setHTMLElemStyle('visibility', 'visible', ['picocon1', 'picocon2', 'picocon3', 'picocon4', 'picocon5', 'picocon6'], true);
  setHTMLElemStyle('visibility', 'visible', 'Title3', true);
  setHTMLElemStyle('visibility', 'hidden', 'Title2', true);
  setHTMLElemStyle('visibility', 'hidden', 'Title1', true);
  setHTMLElemStyle('visibility', 'hidden', 'Title0', true);
  setHTMLElemStyle('top', '-500px', 'verticalmap', true);
});

handleAnnot(true, '!', 'SpringTunnel_ano', ' ! Spring valves at left side !', 'an_10', undefined);
setHTMLElemStyle('display', 'none', 'an_10', false);

eventHTMLElem('click', 'ActionTap', true, function(event) {
  if (MenuBase == 4 && MenuStep == 1) {
    PerformKnife1();
  } else if (MenuBase == 4 && MenuStep == 2) {
    PerformKnife32();
  } else if (MenuBase == 4 && MenuStep == 3) {
    PerformKnife43();
  } else if (MenuBase == 4 && MenuStep == 4) {
    PerformKnife44();
  } else if (MenuBase == 4 && MenuStep == 5) {
    PerformKnife45();
  } else if (MenuBase == 4 && MenuStep == 6) {
    PerformKnife46();
  }
});

eventHTMLElem('touchstart', 'ActionTap', true, function(event) {
  if (MenuBase == 4 && MenuStep == 1) {
    PerformKnife1();
  } else if (MenuBase == 4 && MenuStep == 2) {
    PerformKnife32();
  } else if (MenuBase == 4 && MenuStep == 3) {
    PerformKnife43();
  } else if (MenuBase == 4 && MenuStep == 4) {
    PerformKnife44();
  } else if (MenuBase == 4 && MenuStep == 5) {
    PerformKnife45();
  } else if (MenuBase == 4 && MenuStep == 6) {
    PerformKnife46();
  }
});

eventHTMLElem('click', 'ActionTap', true, function(event) {
  if (MenuBase == 3 && MenuStep == 1) {
    PerformKnife1();
  } else if (MenuBase == 3 && MenuStep == 2) {
    PerformKnife32();
  } else if (MenuBase == 3 && MenuStep == 3) {
    PerformKnife33();
  } else if (MenuBase == 3 && MenuStep == 4) {
    PerformKnife34();
  } else if (MenuBase == 3 && MenuStep == 5) {
    PerformKnife35();
  } else if (MenuBase == 3 && MenuStep == 6) {
    PerformKnife36();
  }
});

eventHTMLElem('touchstart', 'ActionTap', true, function(event) {
  if (MenuBase == 3 && MenuStep == 1) {
    PerformKnife1();
  } else if (MenuBase == 3 && MenuStep == 2) {
    PerformKnife32();
  } else if (MenuBase == 3 && MenuStep == 3) {
    PerformKnife33();
  } else if (MenuBase == 3 && MenuStep == 4) {
    PerformKnife34();
  } else if (MenuBase == 3 && MenuStep == 5) {
    PerformKnife35();
  } else if (MenuBase == 3 && MenuStep == 6) {
    PerformKnife36();
  }
});

eventHTMLElem('click', 'ActionTap', true, function(event) {
  if (MenuBase == 2 && MenuStep == 1) {
    PerformKnife1();
  } else if (MenuBase == 2 && MenuStep == 2) {
    PerformKnife2();
  } else if (MenuBase == 2 && MenuStep == 3) {
    PerformKnife3();
  } else if (MenuBase == 2 && MenuStep == 4) {
    PerformKnife4();
  } else if (MenuBase == 2 && MenuStep == 5) {
    PerformKnife5();
  } else if (MenuBase == 2 && MenuStep == 6) {
    PerformKnife6();
  } else if (MenuBase == 2 && MenuStep == 7) {
    PerformKnife7();
  } else if (MenuBase == 2 && MenuStep == 8) {
    PerformKnife8();
  } else if (MenuBase == 2 && MenuStep == 9) {
    PerformKnife9();
  } else if (MenuBase == 2 && MenuStep == 10) {
    PerformKnife10();
  } else if (MenuBase == 2 && MenuStep == 11) {
    PerformKnife11();
  } else if (MenuBase == 2 && MenuStep == 12) {
    PerformKnife12();
  } else if (MenuBase == 2 && MenuStep == 13) {
    PerformKnife13();
  } else if (MenuBase == 2 && MenuStep == 14) {
    PerformKnife14();
  }
});

eventHTMLElem('touchstart', 'ActionTap', true, function(event) {
  if (MenuBase == 2 && MenuStep == 1) {
    PerformKnife1();
  } else if (MenuBase == 2 && MenuStep == 2) {
    PerformKnife2();
  } else if (MenuBase == 2 && MenuStep == 3) {
    PerformKnife3();
  } else if (MenuBase == 2 && MenuStep == 4) {
    PerformKnife4();
  } else if (MenuBase == 2 && MenuStep == 5) {
    PerformKnife5();
  } else if (MenuBase == 2 && MenuStep == 6) {
    PerformKnife6();
  } else if (MenuBase == 2 && MenuStep == 7) {
    PerformKnife7();
  } else if (MenuBase == 2 && MenuStep == 8) {
    PerformKnife8();
  } else if (MenuBase == 2 && MenuStep == 9) {
    PerformKnife9();
  } else if (MenuBase == 2 && MenuStep == 10) {
    PerformKnife10();
  } else if (MenuBase == 2 && MenuStep == 11) {
    PerformKnife11();
  } else if (MenuBase == 2 && MenuStep == 12) {
    PerformKnife12();
  } else if (MenuBase == 2 && MenuStep == 13) {
    PerformKnife13();
  } else if (MenuBase == 2 && MenuStep == 14) {
    PerformKnife14();
  }
});

'BoltHeadAnime';
eventHTMLElem('click', 'pico1', true, function(event) {
  if (MenuBase == 2) {
    SetKnife1();
  } else if (MenuBase == 3) {
    SetKnife1();
  } else if (MenuBase == 4) {
    SetKnife1();
  }
});
eventHTMLElem('touchstart', 'pico1', true, function(event) {
  if (MenuBase == 2) {
    SetKnife1();
  } else if (MenuBase == 3) {
    SetKnife1();
  } else if (MenuBase == 4) {
    SetKnife1();
  }
});

'MoulinAnime';
eventHTMLElem('click', 'pico2', true, function(event) {
  if (MenuBase == 2) {
    SetKnife2();
  } else if (MenuBase == 3) {
    SetKnife2();
  } else if (MenuBase == 4) {
    SetKnife2();
  }
});
eventHTMLElem('touchstart', 'pico2', true, function(event) {
  if (MenuBase == 2) {
    SetKnife2();
  } else if (MenuBase == 3) {
    SetKnife2();
  } else if (MenuBase == 4) {
    SetKnife2();
  }
});

'descentelame';
eventHTMLElem('click', 'pico3', true, function(event) {
  if (MenuBase == 2) {
    SetKnife3();
  } else if (MenuBase == 3) {
    SetKnife33();
  } else if (MenuBase == 4) {
    SetKnife43();
  }
});
eventHTMLElem('touchstart', 'pico3', true, function(event) {
  if (MenuBase == 2) {
    SetKnife3();
  } else if (MenuBase == 3) {
    SetKnife33();
  } else if (MenuBase == 4) {
    SetKnife43();
  }
});

'Deblocage';
eventHTMLElem('click', 'pico4', true, function(event) {
  if (MenuBase == 2) {
    SetKnife4();
  } else if (MenuBase == 3) {
    SetKnife34();
  } else if (MenuBase == 4) {
    SetKnife44();
  }
});
eventHTMLElem('touchstart', 'pico4', true, function(event) {
  if (MenuBase == 2) {
    SetKnife4();
  } else if (MenuBase == 3) {
    SetKnife34();
  } else if (MenuBase == 4) {
    SetKnife44();
  }
});

'Relachement';
eventHTMLElem('click', 'pico5', true, function(event) {
  if (MenuBase == 2) {
    SetKnife5();
  } else if (MenuBase == 3) {
    SetKnife35();
  } else if (MenuBase == 4) {
    SetKnife45();
  }
});
eventHTMLElem('touchstart', 'pico5', true, function(event) {
  if (MenuBase == 2) {
    SetKnife5();
  } else if (MenuBase == 3) {
    SetKnife35();
  } else if (MenuBase == 4) {
    SetKnife45();
  }
});

'regul';
eventHTMLElem('click', 'pico6', true, function(event) {
  if (MenuBase == 2) {
    SetKnife6();
  } else if (MenuBase == 3) {
    SetKnife36();
  } else if (MenuBase == 4) {
    SetKnife46();
  }
});
eventHTMLElem('touchstart', 'pico6', true, function(event) {
  if (MenuBase == 2) {
    SetKnife6();
  } else if (MenuBase == 3) {
    SetKnife36();
  } else if (MenuBase == 4) {
    SetKnife46();
  }
});

'Blademove';
eventHTMLElem('click', 'pico7', true, function(event) {
  if (MenuBase == 2) {
    SetKnife7();
  }
});
eventHTMLElem('touchstart', 'pico7', true, function(event) {
  if (MenuBase == 2) {
    SetKnife7();
  }
});

'TighDeverouillage';
eventHTMLElem('click', 'pico8', true, function(event) {
  if (MenuBase == 2) {
    SetKnife8();
  }
});
eventHTMLElem('touchstart', 'pico8', true, function(event) {
  if (MenuBase == 2) {
    SetKnife8();
  }
});

'Blademove';
eventHTMLElem('touchstart', 'pico9', true, function(event) {
  if (MenuBase == 2) {
    SetKnife9();
  }
});
eventHTMLElem('click', 'pico9', true, function(event) {
  if (MenuBase == 2) {
    SetKnife9();
  }
});

'PaperCut';
eventHTMLElem('click', 'pico10', true, function(event) {
  if (MenuBase == 2) {
    SetKnife10();
  }
});
eventHTMLElem('touchstart', 'pico10', true, function(event) {
  if (MenuBase == 2) {
    SetKnife10();
  }
});

'rebuild1';
eventHTMLElem('click', 'pico11', true, function(event) {
  if (MenuBase == 2) {
    SetKnife11();
  }
});
eventHTMLElem('touchstart', 'pico11', true, function(event) {
  if (MenuBase == 2) {
    SetKnife11();
  }
});

'Doublecheck';
eventHTMLElem('click', 'pico12', true, function(event) {
  if (MenuBase == 2) {
    SetKnife12();
  }
});
eventHTMLElem('touchstart', 'pico12', true, function(event) {
  if (MenuBase == 2) {
    SetKnife12();
  }
});

'RemontageMoulin';
eventHTMLElem('click', 'pico13', true, function(event) {
  if (MenuBase == 2) {
    SetKnife13();
  }
});
eventHTMLElem('touchstart', 'pico13', true, function(event) {
  if (MenuBase == 2) {
    SetKnife13();
  }
});

'KnifeEnd';
eventHTMLElem('click', 'pico14', true, function(event) {
  if (MenuBase == 2) {
    SetKnife14();
  }
});
eventHTMLElem('touchstart', 'pico14', true, function(event) {
  if (MenuBase == 2) {
    SetKnife14();
  }
});



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
