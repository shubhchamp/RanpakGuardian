/**
 * Generated by Verge3D Puzzles v.3.6.1
 * Thu Feb 03 2022 10:49:11 GMT+0100 (heure normale dâ€™Europe centrale)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.objClickInfo = [];
_pGlob.pickedObject = '';
_pGlob.objHoverInfo = [];
_pGlob.hoveredObject = '';
_pGlob.objMovementInfos = {};
_pGlob.objDragOverCallbacks = [];
_pGlob.objDragOverInfoByBlock = {}
_pGlob.dragMoveOrigins = {};
_pGlob.dragScaleOrigins = {};
_pGlob.mediaElements = {};
_pGlob.loadedFiles = {};
_pGlob.loadedFile = '';
_pGlob.promiseValue = '';
_pGlob.animMixerCallbacks = [];
_pGlob.arHitPoint = new v3d.Vector3(0, 0, 0);
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.animateParamUpdate = null;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.gamepadIndex = 0;

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();
_pGlob.intervals = {};

var _pPhysics = {};

_pPhysics.tickCallbacks = [];
_pPhysics.syncList = [];
_pPhysics.consList = [];

// internal info
_pPhysics.collisionData = [];

// goes to collision callback
_pPhysics.collisionInfo = {
    objectA: '',
    objectB: '',
    distance: 0,
    positionOnA: [0, 0, 0],
    positionOnB: [0, 0, 0],
    normalOnB: [0, 0, 0]
};

var _noWebAudioReported = false;
var _webAudioTinySynth = null;

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};



PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 worng behavior
            elem.setAttribute(attr, value);
        } else {
            elem[attr] = value;
        }
    }
}




// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  setHTMLElemStyle('width', String(Math.round(_initGlob.percentage)) + '%', 'progress_bar', false);
  setHTMLElemAttribute('innerHTML', String(Math.round(_initGlob.percentage)) + '%', 'percentage', false);
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  setHTMLElemStyle('display', 'none', 'preloader_div', false);
  setHTMLElemStyle('visibility', 'visible', ['boutonmenu', 'boutonmenu_return'], true);
  setHTMLElemStyle('visibility', 'visible', 'Title0', true);
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["Reboot"] = Reboot;
this.procedures["Open"] = Open;
this.procedures["Close"] = Close;
this.procedures["returntitle0"] = returntitle0;
this.procedures["Freeze"] = Freeze;
this.procedures["SetAction1"] = SetAction1;
this.procedures["SetAction4"] = SetAction4;
this.procedures["Unfreeze"] = Unfreeze;
this.procedures["SetAction5"] = SetAction5;
this.procedures["SetAction2"] = SetAction2;
this.procedures["SetAction6"] = SetAction6;
this.procedures["SetAction3"] = SetAction3;

var PROC = {
    "Reboot": Reboot,
    "Open": Open,
    "Close": Close,
    "returntitle0": returntitle0,
    "Freeze": Freeze,
    "SetAction1": SetAction1,
    "SetAction4": SetAction4,
    "Unfreeze": Unfreeze,
    "SetAction5": SetAction5,
    "SetAction2": SetAction2,
    "SetAction6": SetAction6,
    "SetAction3": SetAction3,
};

var Ouvert, MenuBase, MenuStep;



// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return (obj.type !== "AmbientLight" && obj.name !== ""
            && !(obj.isMesh && obj.isMaterialGeneratedMesh));
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc;
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}




// getAnimations puzzle
function getAnimations(objNames) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    var animations = [];
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        // use objName as animName - for now we have one-to-one match
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, objName);
        if (action)
            animations.push(objName);
    }
    return animations;
}



/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}



/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && "v3d" in scene.userData && "animFrameRate" in scene.userData.v3d) {
        return scene.userData.v3d.animFrameRate;
    }
    return 24;
}



var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished))
            appInstance.mixer.addEventListener('finished', onMixerFinished);
    };

}();



// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, isPlayAnimCompat, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                // compatibility reasons: deprecated playAnimation puzzles don't
                // change repetitions
                if (!isPlayAnimCompat) {
                    action.repetitions = Infinity;
                }

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}



// show and hide puzzles
function changeVis(objNames, bool) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
    }
}



// outline puzzle
function outline(objNames, doWhat) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}




/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && "v3d" in scene.userData && "coordSystem" in scene.userData.v3d) {
        return scene.userData.v3d.coordSystem;
    } else {
        // COMPAT: <2.17, consider replacing to 'Y_UP_RIGHT' for scenes with unknown origin
        return 'Z_UP_RIGHT';
    }
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();




// tweenCamera puzzle
function tweenCamera(posOrObj, targetOrObj, duration, doSlot, movementType) {

    if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = coordsTransform(worldPos, getCoordSystem(), 'Y_UP_RIGHT');
    } else if (posOrObj) {
        var posObj = getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    } else {
        // empty input means: don't change the position
        var worldPos = appInstance.camera.getWorldPosition(_pGlob.vec3Tmp);
    }

    if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = coordsTransform(worldTarget, getCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var targObj = getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
    }

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot,
                    movementType);
        }
    } else {
        // TODO: static camera, just position it for now
        if (appInstance.camera.parent) {
            appInstance.camera.parent.worldToLocal(worldPos);
        }
        appInstance.camera.position.copy(worldPos);
        appInstance.camera.lookAt(worldTarget);
        doSlot();
    }
}



// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}



// bloom puzzle
function bloom(threshold, strength, radius) {
    appInstance.enablePostprocessing([{
        type: 'bloom',
        threshold: threshold,
        strength: strength,
        radius: radius
    }]);
}



// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}


// Describe this function...
function Reboot() {
  if (Ouvert == true) {
    changeVis(['ALL_OBJECTS'], true);

    operateAnimation('SET_FRAME', getAnimations(['ALL_OBJECTS']), 50, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('PLAY', getAnimations(['GROUP', 'CapotAV']), 0, 50, 'LoopOnce', 1,
            function() {}, undefined, true);

        changeVis(['GROUP', 'NoEntry'], false);
    tweenCamera('CameraMainStart', 'FocusMain', 2, function() {
      Ouvert = false;
    }, 0);
    setHTMLElemStyle('visibility', 'Hidden', ['ActionTap', 'Check1', 'Check2', 'ActionUnlock'], true);
    outline(['ALL_OBJECTS'], 'DISABLE');
  } else if (Ouvert == false) {
    changeVis(['ALL_OBJECTS'], true);

    operateAnimation('SET_FRAME', getAnimations(['ALL_OBJECTS']), 0, null, 'AUTO', 1,
            function() {}, undefined, false);

        changeVis(['GROUP', 'NoEntry'], false);
    tweenCamera('CameraMainStart', 'FocusMain', 2, function() {}, 0);
    setHTMLElemStyle('visibility', 'Hidden', ['ActionTap', 'Check1', 'Check2', 'ActionUnlock'], true);
    outline(['ALL_OBJECTS'], 'DISABLE');
  }
}

// Describe this function...
function Open() {
  if (Ouvert == false) {

    operateAnimation('PLAY', getAnimations(['GROUP', 'CapotAV']), 0, 50, 'LoopOnce', 1,
            function() {
      Ouvert = true;
    }, undefined, false);

        }
}

// Describe this function...
function Close() {
  if (Ouvert == true) {
    changeVis(['ALL_OBJECTS'], true);

    operateAnimation('SET_FRAME', getAnimations(['ALL_OBJECTS']), 50, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('PLAY', getAnimations(['GROUP', 'CapotAV']), 0, 50, 'LoopOnce', 1,
            function() {
      Ouvert = false;
    }, undefined, true);

        }
}


// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback, false);
    }
}


// Describe this function...
function returntitle0() {
  setHTMLElemStyle('visibility', 'visible', 'Title0', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleOne', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleTwo', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleThree', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleFour', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleFive', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleSix', true);
  setHTMLElemStyle('visibility', 'hidden', 'ActionTap', true);
  setHTMLElemStyle('visibility', 'hidden', 'ActionUnlock', true);
}

// Describe this function...
function Freeze() {
  setHTMLElemStyle('opacity', '0.5', ['img3', 'img4', 'img5', 'txt_One', 'txt_two', 'txt_Three', 'txt_Four', 'txt_Five', 'txt_Six'], true);
  setHTMLElemStyle('visibility', 'hidden', ['tap_One', 'tap_two', 'tap_Three', 'tap_Four', 'tap_Five', 'tap_Six'], true);
}

// Describe this function...
function SetAction1() {
  setHTMLElemStyle('visibility', 'Hidden', ['ActionTap', 'ActionUnlock'], true);
  setHTMLElemStyle('visibility', 'hidden', ['Check1', 'Check2'], true);
  setHTMLElemStyle('visibility', 'visible', 'Check1', true);
  Freeze();
  Ouvert = false;
  changeVis(['ALL_OBJECTS'], true);

  operateAnimation('SET_FRAME', getAnimations(['ALL_OBJECTS']), 0, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(['GROUP', 'NoEntry'], false);
  outline('PowerButton', 'ENABLE');
  tweenCamera('CameraElectro2', 'FocusElectro2', 2, function() {
    registerSetTimeout(1, function() {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Ebox']), 50, 90, 'AUTO', 1,
              function() {
        outline('PowerButton', 'DISABLE');
        tweenCamera('CameraElectro', 'FocusElectro1', 2, function() {
          outline('PlugInPower', 'ENABLE');
          registerSetTimeout(1, function() {

            operateAnimation('PLAY', getAnimations(['GROUP', 'Unplug']), 100, 180, 'AUTO', 1,
                    function() {
              outline('PlugInPower', 'DISABLE');
              tweenCamera('CameraMainStart', 'FocusMain', 2, function() {
                outline('CoiffeLock', 'ENABLE');
                registerSetTimeout(1, function() {

                  operateAnimation('PLAY', getAnimations(['GROUP', 'CapotAV']), 0, 50, 'LoopOnce', 1,
                          function() {
                    setHTMLElemStyle('visibility', 'Visible', 'ActionTap', true);
                    outline('CoiffeLock', 'DISABLE');
                    Ouvert = true;
                  }, undefined, false);

                      });
              }, 0);
            }, undefined, false);

                });
        }, 0);
      }, undefined, false);

          });
  }, 0);
}

// Describe this function...
function SetAction4() {
  setHTMLElemStyle('visibility', 'Hidden', ['ActionTap', 'ActionUnlock'], true);
  setHTMLElemStyle('visibility', 'hidden', ['Check1', 'Check2'], true);
  Freeze();
  changeVis(['ALL_OBJECTS'], true);

  operateAnimation('SET_FRAME', getAnimations(['ALL_OBJECTS']), 0, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(['GROUP', 'NoEntry'], false);
  outline('CoiffeLock', 'ENABLE');
  tweenCamera('CameraBlades', 'FocusBlades', 2, function() {
    outline('CoiffeLock', 'DISABLE');
    outline('TickBlade', 'ENABLE');
  }, 0);

  operateAnimation('PLAY', getAnimations(['GROUP', 'CapotAV']), 0, 50, 'LoopOnce', 1,
          function() {
    Ouvert = true;

    operateAnimation('PLAY', getAnimations(['GROUP', 'HeadAnime']), 200, 250, 'LoopOnce', 1,
            function() {
      outline(['TickBlade', 'FenetreCoupe'], 'ENABLE');
      setHTMLElemStyle('visibility', 'Visible', 'ActionTap', true);
    }, undefined, false);

        }, undefined, false);

      }

// Describe this function...
function Unfreeze() {
  setHTMLElemStyle('opacity', '1', ['img3', 'img4', 'img5', 'txt_One', 'txt_two', 'txt_Three', 'txt_Four', 'txt_Five', 'txt_Six'], true);
  setHTMLElemStyle('visibility', 'visible', ['tap_One', 'tap_two', 'tap_Three', 'tap_Four', 'tap_Five', 'tap_Six'], true);
}

// Describe this function...
function SetAction5() {
  setHTMLElemStyle('visibility', 'Hidden', ['ActionTap', 'ActionUnlock'], true);
  setHTMLElemStyle('visibility', 'hidden', ['Check1', 'Check2'], true);
  Freeze();
  changeVis(['ALL_OBJECTS'], true);

  operateAnimation('SET_FRAME', getAnimations(['ALL_OBJECTS']), 0, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(['GROUP', 'NoEntry'], false);
  outline('TickElec2', 'ENABLE');
  tweenCamera('CameraElectro3', 'TickElec2', 2, function() {
    setHTMLElemStyle('visibility', 'Visible', 'ActionTap', true);
  }, 0);
}

// Describe this function...
function SetAction2() {
  setHTMLElemStyle('visibility', 'Hidden', ['ActionTap', 'ActionUnlock'], true);
  setHTMLElemStyle('visibility', 'hidden', ['Check1', 'Check2'], true);
  setHTMLElemStyle('visibility', 'visible', 'Check2', true);
  Freeze();
  changeVis(['ALL_OBJECTS'], true);

  operateAnimation('SET_FRAME', getAnimations(['ALL_OBJECTS']), 0, null, 'AUTO', 1,
          function() {}, undefined, false);

      outline(['Hand', 'OutletShow'], 'ENABLE');
  tweenCamera('CameraElectro2', 'FocusNoHand', 2, function() {
    registerSetTimeout(1, function() {

      operateAnimation('PLAY', getAnimations(['GROUP', 'NoEntry']), 200, 320, 'AUTO', 1,
              function() {
        outline(['Hand', 'OutletShow'], 'DISABLE');
        setHTMLElemStyle('visibility', 'Visible', 'ActionTap', true);
      }, undefined, false);

          });
  }, 0);
}

// Describe this function...
function SetAction6() {
  setHTMLElemStyle('visibility', 'Hidden', ['ActionTap', 'ActionUnlock'], true);
  setHTMLElemStyle('visibility', 'hidden', ['Check1', 'Check2'], true);

  operateAnimation('SET_FRAME', getAnimations(['ALL_OBJECTS']), 0, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('PLAY', getAnimations(['ArrowPush', 'ControllerArrow']), null, null, 'AUTO', 1,
          function() {}, undefined, false);

      Freeze();
  Ouvert = false;
  changeVis(['ALL_OBJECTS'], true);
  changeVis(['GROUP', 'NoEntry'], false);
  outline(['ArrowPush', 'ButtonStop'], 'ENABLE');
  tweenCamera('CameraStop', 'StopSupport', 2, function() {
    registerSetTimeout(1, function() {

      operateAnimation('PLAY', getAnimations('ControllerButton'), 100, 120, 'LoopOnce', 1,
              function() {
        registerSetTimeout(1, function() {
          setHTMLElemStyle('visibility', 'Visible', 'ActionUnlock', true);
          outline('ArrowPush', 'DISABLE');
          outline(['ArrowStop', 'ButtonStop'], 'ENABLE');
          eventHTMLElem('click', 'ActionUnlock', true, function(event) {
            setHTMLElemStyle('visibility', 'hidden', 'ActionUnlock', true);

            operateAnimation('PLAY', getAnimations('ControllerButton'), 200, 240, 'AUTO', 1,
                    function() {
              outline(['ArrowStop', 'ButtonStop'], 'DISABLE');
              registerSetTimeout(1, function() {
                setHTMLElemStyle('visibility', 'hidden', 'ActionUnlock', true);
                setHTMLElemStyle('visibility', 'Visible', 'ActionTap', true);
              });
            }, undefined, false);

                });
        });
      }, undefined, false);

          });
  }, 0);
}

// Describe this function...
function SetAction3() {
  setHTMLElemStyle('visibility', 'Hidden', ['ActionTap', 'ActionUnlock'], true);
  setHTMLElemStyle('visibility', 'hidden', ['Check1', 'Check2'], true);
  Freeze();
  changeVis(['ALL_OBJECTS'], true);

  operateAnimation('SET_FRAME', getAnimations(['ALL_OBJECTS']), 0, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(['GROUP', 'NoEntry'], false);
  outline('CoiffeLock', 'ENABLE');
  tweenCamera('CameraModules', 'FocusPinching', 2, function() {
    outline('CoiffeLock', 'DISABLE');
    outline(['FoldingWheel', 'TickPinch'], 'ENABLE');
  }, 0);

  operateAnimation('PLAY', getAnimations(['GROUP', 'CapotAV']), 0, 50, 'LoopOnce', 1,
          function() {
    setHTMLElemStyle('visibility', 'Visible', 'ActionTap', true);
    Ouvert = true;
  }, undefined, false);

      }


'Etats initiaux';

operateAnimation('SET_FRAME', getAnimations(['ALL_OBJECTS']), 0, null, 'AUTO', 1,
        function() {}, undefined, false);

    Ouvert = false;
MenuBase = 0;
MenuStep = 0;
changeVis(['ALL_OBJECTS'], true);
changeVis(['GROUP', 'NoEntry'], false);
outline(['ALL_OBJECTS'], 'DISABLE');
registerSetTimeout(1, function() {
  tweenCamera('CameraMainStart', 'FocusMain', 2, function() {}, 0);
});
bloom(1.2, 0.2, 1.5);

'clicmenu';
eventHTMLElem('click', 'tap_One', true, function(event) {
  setHTMLElemStyle('visibility', 'hidden', 'Title0', true);
  setHTMLElemStyle('visibility', 'visible', 'TitleOne', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleTwo', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleThree', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleFour', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleFive', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleSix', true);
  SetAction1();
});

'clicmenu';
eventHTMLElem('click', ['ActionTap', 'retap_0', 'tap_exitcontent'], true, function(event) {
  Unfreeze();
  returntitle0();
  Reboot();
});

eventHTMLElem('click', 'tap_two', true, function(event) {
  setHTMLElemStyle('visibility', 'hidden', 'Title0', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleOne', true);
  setHTMLElemStyle('visibility', 'visible', 'TitleTwo', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleThree', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleFour', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleFive', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleSix', true);
  SetAction2();
});

'Selecteursynchro outline';

'Touchstartmenu';
eventHTMLElem('touchstart', ['ActionTap', 'retap_0', 'tap_exitcontent'], true, function(event) {
  Unfreeze();
  returntitle0();
  Reboot();
});

eventHTMLElem('click', 'tap_Three', true, function(event) {
  setHTMLElemStyle('visibility', 'hidden', 'Title0', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleOne', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleTwo', true);
  setHTMLElemStyle('visibility', 'visible', 'TitleThree', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleFour', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleFive', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleSix', true);
  SetAction3();
});

eventHTMLElem('click', 'tap_Four', true, function(event) {
  setHTMLElemStyle('visibility', 'hidden', 'Title0', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleOne', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleTwo', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleThree', true);
  setHTMLElemStyle('visibility', 'visible', 'TitleFour', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleFive', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleSix', true);
  SetAction4();
});

eventHTMLElem('click', 'tap_Five', true, function(event) {
  setHTMLElemStyle('visibility', 'hidden', 'Title0', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleOne', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleTwo', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleThree', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleFour', true);
  setHTMLElemStyle('visibility', 'visible', 'TitleFive', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleSix', true);
  SetAction5();
});

eventHTMLElem('click', 'tap_Six', true, function(event) {
  setHTMLElemStyle('visibility', 'hidden', 'Title0', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleOne', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleTwo', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleThree', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleFour', true);
  setHTMLElemStyle('visibility', 'hidden', 'TitleFive', true);
  setHTMLElemStyle('visibility', 'visible', 'TitleSix', true);
  SetAction6();
});



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
